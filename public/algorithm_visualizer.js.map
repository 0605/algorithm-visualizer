{"version":3,"names":[],"mappings":"","sources":["algorithm_visualizer.js"],"sourcesContent":["/**\n * algorithm-visualizer - Algorithm Visualizer\n * @version v0.1.0\n * @author Jason Park & contributors\n * @link https://github.com/parkjs814/AlgorithmVisualizer#readme\n * @license MIT\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _$ = $;\nvar extend = _$.extend;\n\n\nvar cache = {\n  lastFileUsed: '',\n  files: {}\n};\n\nvar assertFileName = function assertFileName(name) {\n  if (!name) {\n    throw 'Missing file name';\n  }\n};\n\n/**\n * Global application cache\n */\nmodule.exports = {\n  getCachedFile: function getCachedFile(name) {\n    assertFileName(name);\n    return cache.files[name];\n  },\n  updateCachedFile: function updateCachedFile(name, updates) {\n    assertFileName(name);\n    if (!cache.files[name]) {\n      cache.files[name] = {};\n    }\n    extend(cache.files[name], updates);\n  },\n  getLastFileUsed: function getLastFileUsed() {\n    return cache.lastFileUsed;\n  },\n  setLastFileUsed: function setLastFileUsed(file) {\n    cache.lastFileUsed = file;\n  }\n};\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar Editor = require('../editor');\nvar TracerManager = require('../tracer_manager');\nvar DOM = require('../dom/setup');\n\nvar _require = require('../dom/loading_slider');\n\nvar showLoadingSlider = _require.showLoadingSlider;\nvar hideLoadingSlider = _require.hideLoadingSlider;\n\n\nvar Cache = require('./cache');\n\nvar state = {\n  isLoading: null,\n  editor: null,\n  tracerManager: null,\n  categories: null,\n  loadedScratch: null\n};\n\nvar initState = function initState(tracerManager) {\n  state.isLoading = false;\n  state.editor = new Editor(tracerManager);\n  state.tracerManager = tracerManager;\n  state.categories = {};\n  state.loadedScratch = null;\n};\n\n/**\n * Global application singleton.\n */\nvar App = function App() {\n\n  this.getIsLoading = function () {\n    return state.isLoading;\n  };\n\n  this.setIsLoading = function (loading) {\n    state.isLoading = loading;\n    if (loading) {\n      showLoadingSlider();\n    } else {\n      hideLoadingSlider();\n    }\n  };\n\n  this.getEditor = function () {\n    return state.editor;\n  };\n\n  this.getCategories = function () {\n    return state.categories;\n  };\n\n  this.getCategory = function (name) {\n    return state.categories[name];\n  };\n\n  this.setCategories = function (categories) {\n    state.categories = categories;\n  };\n\n  this.updateCategory = function (name, updates) {\n    $.extend(state.categories[name], updates);\n  };\n\n  this.getTracerManager = function () {\n    return state.tracerManager;\n  };\n\n  this.getLoadedScratch = function () {\n    return state.loadedScratch;\n  };\n\n  this.setLoadedScratch = function (loadedScratch) {\n    state.loadedScratch = loadedScratch;\n  };\n\n  var tracerManager = TracerManager.init();\n\n  initState(tracerManager);\n  DOM.setup(tracerManager);\n};\n\nApp.prototype = Cache;\n\nmodule.exports = App;\n\n},{\"../dom/loading_slider\":7,\"../dom/setup\":8,\"../editor\":26,\"../tracer_manager\":59,\"./cache\":1}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * This is the main application instance.\n * Gets populated on page load. \n */\n\nmodule.exports = {};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar Server = require('../server');\nvar showAlgorithm = require('./show_algorithm');\n\nvar _$ = $;\nvar each = _$.each;\n\n\nvar addAlgorithmToCategoryDOM = function addAlgorithmToCategoryDOM(category, subList, algorithm) {\n  var $algorithm = $('<button class=\"indent collapse\">').append(subList[algorithm]).attr('data-algorithm', algorithm).attr('data-category', category).click(function () {\n    Server.loadAlgorithm(category, algorithm).then(function (data) {\n      showAlgorithm(category, algorithm, data);\n    });\n  });\n\n  $('#list').append($algorithm);\n};\n\nvar addCategoryToDOM = function addCategoryToDOM(category) {\n  var _app$getCategory = app.getCategory(category);\n\n  var categoryName = _app$getCategory.name;\n  var categorySubList = _app$getCategory.list;\n\n\n  var $category = $('<button class=\"category\">').append('<i class=\"fa fa-fw fa-caret-right\">').append(categoryName).attr('data-category', category);\n\n  $category.click(function () {\n    $('.indent[data-category=\"' + category + '\"]').toggleClass('collapse');\n    $(this).find('i.fa').toggleClass('fa-caret-right fa-caret-down');\n  });\n\n  $('#list').append($category);\n\n  each(categorySubList, function (algorithm) {\n    addAlgorithmToCategoryDOM(category, categorySubList, algorithm);\n  });\n};\n\nmodule.exports = function () {\n  each(app.getCategories(), addCategoryToDOM);\n};\n\n},{\"../app\":3,\"../server\":53,\"./show_algorithm\":19}],5:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../server');\n\nvar _$ = $;\nvar each = _$.each;\n\n\nvar addFileToDOM = function addFileToDOM(category, algorithm, file, explanation) {\n  var $file = $('<button>').append(file).attr('data-file', file).click(function () {\n    Server.loadFile(category, algorithm, file, explanation);\n    $('.files_bar > .wrapper > button').removeClass('active');\n    $(this).addClass('active');\n  });\n  $('.files_bar > .wrapper').append($file);\n  return $file;\n};\n\nmodule.exports = function (category, algorithm, files, requestedFile) {\n  $('.files_bar > .wrapper').empty();\n\n  each(files, function (file, explanation) {\n    var $file = addFileToDOM(category, algorithm, file, explanation);\n    if (requestedFile && requestedFile == file) $file.click();\n  });\n\n  if (!requestedFile) $('.files_bar > .wrapper > button').first().click();\n  $('.files_bar > .wrapper').scroll();\n};\n\n},{\"../server\":53}],6:[function(require,module,exports){\n'use strict';\n\nvar showAlgorithm = require('./show_algorithm');\nvar addCategories = require('./add_categories');\nvar showDescription = require('./show_description');\nvar addFiles = require('./add_files');\nvar showFirstAlgorithm = require('./show_first_algorithm');\nvar showRequestedAlgorithm = require('./show_requested_algorithm');\n\nmodule.exports = {\n  showAlgorithm: showAlgorithm,\n  addCategories: addCategories,\n  showDescription: showDescription,\n  addFiles: addFiles,\n  showFirstAlgorithm: showFirstAlgorithm,\n  showRequestedAlgorithm: showRequestedAlgorithm\n};\n\n},{\"./add_categories\":4,\"./add_files\":5,\"./show_algorithm\":19,\"./show_description\":20,\"./show_first_algorithm\":21,\"./show_requested_algorithm\":22}],7:[function(require,module,exports){\n'use strict';\n\nvar showLoadingSlider = function showLoadingSlider() {\n  $('#loading-slider').removeClass('loaded');\n};\n\nvar hideLoadingSlider = function hideLoadingSlider() {\n  $('#loading-slider').addClass('loaded');\n};\n\nmodule.exports = {\n  showLoadingSlider: showLoadingSlider,\n  hideLoadingSlider: hideLoadingSlider\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nvar setupDividers = require('./setup_dividers');\nvar setupDocument = require('./setup_document');\nvar setupFilesBar = require('./setup_files_bar');\nvar setupInterval = require('./setup_interval');\nvar setupModuleContainer = require('./setup_module_container');\nvar setupPoweredBy = require('./setup_powered_by');\nvar setupScratchPaper = require('./setup_scratch_paper');\nvar setupSideMenu = require('./setup_side_menu');\nvar setupTopMenu = require('./setup_top_menu');\nvar setupWindow = require('./setup_window');\n\n/**\n * Initializes elements once the app loads in the DOM. \n */\nvar setup = function setup() {\n\n  $('.btn input').click(function (e) {\n    e.stopPropagation();\n  });\n\n  // dividers\n  setupDividers();\n\n  // document\n  setupDocument();\n\n  // files bar\n  setupFilesBar();\n\n  // interval\n  setupInterval();\n\n  // module container\n  setupModuleContainer();\n\n  // powered by\n  setupPoweredBy();\n\n  // scratch paper\n  setupScratchPaper();\n\n  // side menu\n  setupSideMenu();\n\n  // top menu\n  setupTopMenu();\n\n  // window\n  setupWindow();\n};\n\nmodule.exports = {\n  setup: setup\n};\n\n},{\"./setup_dividers\":9,\"./setup_document\":10,\"./setup_files_bar\":11,\"./setup_interval\":12,\"./setup_module_container\":13,\"./setup_powered_by\":14,\"./setup_scratch_paper\":15,\"./setup_side_menu\":16,\"./setup_top_menu\":17,\"./setup_window\":18}],9:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../../app');\n\nvar addDividerToDom = function addDividerToDom(divider) {\n  var _divider = _slicedToArray(divider, 3);\n\n  var vertical = _divider[0];\n  var $first = _divider[1];\n  var $second = _divider[2];\n\n  var $parent = $first.parent();\n  var thickness = 5;\n\n  var $divider = $('<div class=\"divider\">');\n\n  var dragging = false;\n  if (vertical) {\n    (function () {\n      $divider.addClass('vertical');\n\n      var _left = -thickness / 2;\n      $divider.css({\n        top: 0,\n        bottom: 0,\n        left: _left,\n        width: thickness\n      });\n\n      var x = void 0;\n      $divider.mousedown(function (_ref) {\n        var pageX = _ref.pageX;\n\n        x = pageX;\n        dragging = true;\n      });\n\n      $(document).mousemove(function (_ref2) {\n        var pageX = _ref2.pageX;\n\n        if (dragging) {\n          var new_left = $second.position().left + pageX - x;\n          var percent = new_left / $parent.width() * 100;\n          percent = Math.min(90, Math.max(10, percent));\n          $first.css('right', 100 - percent + '%');\n          $second.css('left', percent + '%');\n          x = pageX;\n          app.getTracerManager().resize();\n          $('.files_bar > .wrapper').scroll();\n        }\n      });\n\n      $(document).mouseup(function (e) {\n        dragging = false;\n      });\n    })();\n  } else {\n    (function () {\n\n      $divider.addClass('horizontal');\n      var _top = -thickness / 2;\n      $divider.css({\n        top: _top,\n        height: thickness,\n        left: 0,\n        right: 0\n      });\n\n      var y = void 0;\n      $divider.mousedown(function (_ref3) {\n        var pageY = _ref3.pageY;\n\n        y = pageY;\n        dragging = true;\n      });\n\n      $(document).mousemove(function (_ref4) {\n        var pageY = _ref4.pageY;\n\n        if (dragging) {\n          var new_top = $second.position().top + pageY - y;\n          var percent = new_top / $parent.height() * 100;\n          percent = Math.min(90, Math.max(10, percent));\n          $first.css('bottom', 100 - percent + '%');\n          $second.css('top', percent + '%');\n          y = pageY;\n          app.getTracerManager().resize();\n        }\n      });\n\n      $(document).mouseup(function (e) {\n        dragging = false;\n      });\n    })();\n  }\n\n  $second.append($divider);\n};\n\nmodule.exports = function () {\n  var dividers = [['v', $('.sidemenu'), $('.workspace')], ['v', $('.viewer_container'), $('.editor_container')], ['h', $('.data_container'), $('.code_container')]];\n  for (var i = 0; i < dividers.length; i++) {\n    addDividerToDom(dividers[i]);\n  }\n};\n\n},{\"../../app\":3}],10:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\n\nmodule.exports = function () {\n  $(document).on('click', 'a', function (e) {\n    console.log(e);\n    e.preventDefault();\n    if (!window.open($(this).attr('href'), '_blank')) {\n      alert('Please allow popups for this site');\n    }\n  });\n\n  $(document).mouseup(function (e) {\n    app.getTracerManager().command('mouseup', e);\n  });\n};\n\n},{\"../../app\":3}],11:[function(require,module,exports){\n'use strict';\n\nvar definitelyBigger = function definitelyBigger(x, y) {\n  return x > y + 2;\n};\n\nmodule.exports = function () {\n\n  $('.files_bar > .btn-left').click(function () {\n    var $wrapper = $('.files_bar > .wrapper');\n    var clipWidth = $wrapper.width();\n    var scrollLeft = $wrapper.scrollLeft();\n\n    $($wrapper.children('button').get().reverse()).each(function () {\n      var left = $(this).position().left;\n      var right = left + $(this).outerWidth();\n      if (0 > left) {\n        $wrapper.scrollLeft(scrollLeft + right - clipWidth);\n        return false;\n      }\n    });\n  });\n\n  $('.files_bar > .btn-right').click(function () {\n    var $wrapper = $('.files_bar > .wrapper');\n    var clipWidth = $wrapper.width();\n    var scrollLeft = $wrapper.scrollLeft();\n\n    $wrapper.children('button').each(function () {\n      var left = $(this).position().left;\n      var right = left + $(this).outerWidth();\n      if (clipWidth < right) {\n        $wrapper.scrollLeft(scrollLeft + left);\n        return false;\n      }\n    });\n  });\n\n  $('.files_bar > .wrapper').scroll(function () {\n\n    var $wrapper = $('.files_bar > .wrapper');\n    var clipWidth = $wrapper.width();\n    var $left = $wrapper.children('button:first-child');\n    var $right = $wrapper.children('button:last-child');\n    var left = $left.position().left;\n    var right = $right.position().left + $right.outerWidth();\n\n    if (definitelyBigger(0, left) && definitelyBigger(clipWidth, right)) {\n      var scrollLeft = $wrapper.scrollLeft();\n      $wrapper.scrollLeft(scrollLeft + clipWidth - right);\n      return;\n    }\n\n    var lefter = definitelyBigger(0, left);\n    var righter = definitelyBigger(right, clipWidth);\n    $wrapper.toggleClass('shadow-left', lefter);\n    $wrapper.toggleClass('shadow-right', righter);\n    $('.files_bar > .btn-left').attr('disabled', !lefter);\n    $('.files_bar > .btn-right').attr('disabled', !righter);\n  });\n};\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../../app');\nvar Toast = require('../toast');\n\nvar parseFloat = Number.parseFloat;\n\n\nvar minInterval = 0.1;\nvar maxInterval = 10;\nvar startInterval = 0.5;\nvar stepInterval = 0.1;\n\nvar normalize = function normalize(sec) {\n\n  var interval = void 0;\n  var message = void 0;\n  if (sec < minInterval) {\n    interval = minInterval;\n    message = 'Interval of ' + sec + ' seconds is too low. Setting to min allowed interval of ' + minInterval + ' second(s).';\n  } else if (sec > maxInterval) {\n    interval = maxInterval;\n    message = 'Interval of ' + sec + ' seconds is too high. Setting to max allowed interval of ' + maxInterval + ' second(s).';\n  } else {\n    interval = sec;\n    message = 'Interval has been set to ' + sec + ' second(s).';\n  }\n\n  return [interval, message];\n};\n\nmodule.exports = function () {\n\n  var $interval = $('#interval');\n  $interval.val(startInterval);\n  $interval.attr({\n    max: maxInterval,\n    min: minInterval,\n    step: stepInterval\n  });\n\n  $('#interval').on('change', function () {\n    var tracerManager = app.getTracerManager();\n\n    var _normalize = normalize(parseFloat($(this).val()));\n\n    var _normalize2 = _slicedToArray(_normalize, 2);\n\n    var seconds = _normalize2[0];\n    var message = _normalize2[1];\n\n\n    $(this).val(seconds);\n    tracerManager.interval = seconds * 1000;\n    Toast.showInfoToast(message);\n  });\n};\n\n},{\"../../app\":3,\"../toast\":23}],13:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\n\nmodule.exports = function () {\n\n  var $module_container = $('.module_container');\n\n  $module_container.on('mousedown', '.module_wrapper', function (e) {\n    app.getTracerManager().findOwner(this).mousedown(e);\n  });\n\n  $module_container.on('mousemove', '.module_wrapper', function (e) {\n    app.getTracerManager().findOwner(this).mousemove(e);\n  });\n\n  $module_container.on('DOMMouseScroll mousewheel', '.module_wrapper', function (e) {\n    app.getTracerManager().findOwner(this).mousewheel(e);\n  });\n};\n\n},{\"../../app\":3}],14:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  $('#powered-by').click(function () {\n    $('#powered-by-list button').toggleClass('collapse');\n  });\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\nvar Server = require('../../server');\nvar showAlgorithm = require('../show_algorithm');\n\nmodule.exports = function () {\n  $('#scratch-paper').click(function () {\n    var category = 'scratch';\n    var algorithm = app.getLoadedScratch();\n    Server.loadAlgorithm(category, algorithm).then(function (data) {\n      showAlgorithm(category, algorithm, data);\n    });\n  });\n};\n\n},{\"../../app\":3,\"../../server\":53,\"../show_algorithm\":19}],16:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\n\nvar sidemenu_percent = void 0;\n\nmodule.exports = function () {\n  $('#navigation').click(function () {\n    var $sidemenu = $('.sidemenu');\n    var $workspace = $('.workspace');\n\n    $sidemenu.toggleClass('active');\n    $('.nav-dropdown').toggleClass('fa-caret-down fa-caret-up');\n\n    if ($sidemenu.hasClass('active')) {\n      $sidemenu.css('right', 100 - sidemenu_percent + '%');\n      $workspace.css('left', sidemenu_percent + '%');\n    } else {\n      sidemenu_percent = $workspace.position().left / $('body').width() * 100;\n      $sidemenu.css('right', 0);\n      $workspace.css('left', 0);\n    }\n\n    app.getTracerManager().resize();\n  });\n};\n\n},{\"../../app\":3}],17:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\nvar Server = require('../../server');\nvar Toast = require('../toast');\n\nmodule.exports = function () {\n\n  // shared\n  $('#shared').mouseup(function () {\n    $(this).select();\n  });\n\n  $('#btn_share').click(function () {\n\n    var $icon = $(this).find('.fa-share');\n    $icon.addClass('fa-spin fa-spin-faster');\n\n    Server.shareScratchPaper().then(function (url) {\n      $icon.removeClass('fa-spin fa-spin-faster');\n      $('#shared').removeClass('collapse');\n      $('#shared').val(url);\n      Toast.showInfoToast('Shareable link is created.');\n    });\n  });\n\n  // control\n\n  $('#btn_run').click(function () {\n    $('#btn_trace').click();\n    var err = app.getEditor().execute();\n    if (err) {\n      console.error(err);\n      Toast.showErrorToast(err);\n    }\n  });\n  $('#btn_pause').click(function () {\n    if (app.getTracerManager().isPause()) {\n      app.getTracerManager().resumeStep();\n    } else {\n      app.getTracerManager().pauseStep();\n    }\n  });\n  $('#btn_prev').click(function () {\n    app.getTracerManager().pauseStep();\n    app.getTracerManager().prevStep();\n  });\n  $('#btn_next').click(function () {\n    app.getTracerManager().pauseStep();\n    app.getTracerManager().nextStep();\n  });\n\n  // description & trace\n\n  $('#btn_desc').click(function () {\n    $('.tab_container > .tab').removeClass('active');\n    $('#tab_desc').addClass('active');\n    $('.tab_bar > button').removeClass('active');\n    $(this).addClass('active');\n  });\n\n  $('#btn_trace').click(function () {\n    $('.tab_container > .tab').removeClass('active');\n    $('#tab_module').addClass('active');\n    $('.tab_bar > button').removeClass('active');\n    $(this).addClass('active');\n  });\n};\n\n},{\"../../app\":3,\"../../server\":53,\"../toast\":23}],18:[function(require,module,exports){\n'use strict';\n\nvar app = require('../../app');\n\nmodule.exports = function () {\n  $(window).resize(function () {\n    app.getTracerManager().resize();\n  });\n};\n\n},{\"../../app\":3}],19:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\n\nvar _require = require('../utils');\n\nvar isScratchPaper = _require.isScratchPaper;\n\n\nvar showDescription = require('./show_description');\nvar addFiles = require('./add_files');\n\nmodule.exports = function (category, algorithm, data, requestedFile) {\n  var $menu = void 0;\n  var category_name = void 0;\n  var algorithm_name = void 0;\n\n  if (isScratchPaper(category)) {\n    $menu = $('#scratch-paper');\n    category_name = 'Scratch Paper';\n    algorithm_name = algorithm ? 'Shared' : 'Temporary';\n  } else {\n    $menu = $('[data-category=\"' + category + '\"][data-algorithm=\"' + algorithm + '\"]');\n    var categoryObj = app.getCategory(category);\n    category_name = categoryObj.name;\n    algorithm_name = categoryObj.list[algorithm];\n  }\n\n  $('.sidemenu button').removeClass('active');\n  $menu.addClass('active');\n\n  $('#category').html(category_name);\n  $('#algorithm').html(algorithm_name);\n  $('#tab_desc > .wrapper').empty();\n  $('.files_bar > .wrapper').empty();\n  $('#explanation').html('');\n\n  app.setLastFileUsed(null);\n  app.getEditor().clearContent();\n\n  var files = data.files;\n\n\n  delete data.files;\n\n  showDescription(data);\n  addFiles(category, algorithm, files, requestedFile);\n};\n\n},{\"../app\":3,\"../utils\":65,\"./add_files\":5,\"./show_description\":20}],20:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar isArray = Array.isArray;\nvar _$ = $;\nvar each = _$.each;\n\n\nmodule.exports = function (data) {\n  var $container = $('#tab_desc > .wrapper');\n  $container.empty();\n\n  each(data, function (key, value) {\n\n    if (key) {\n      $container.append($('<h3>').html(key));\n    }\n\n    if (typeof value === 'string') {\n      $container.append($('<p>').html(value));\n    } else if (isArray(value)) {\n      (function () {\n\n        var $ul = $('<ul>');\n        $container.append($ul);\n\n        value.forEach(function (li) {\n          $ul.append($('<li>').html(li));\n        });\n      })();\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n      (function () {\n\n        var $ul = $('<ul>');\n        $container.append($ul);\n\n        each(value, function (prop) {\n          $ul.append($('<li>').append($('<strong>').html(prop)).append(' ' + value[prop]));\n        });\n      })();\n    }\n  });\n};\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\n// click the first algorithm in the first category\n\nmodule.exports = function () {\n  $('#list button.category').first().click();\n  $('#list button.category + .indent').first().click();\n};\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nvar Server = require('../server');\nvar showAlgorithm = require('./show_algorithm');\n\nmodule.exports = function (category, algorithm, file) {\n  $('.category[data-category=\"' + category + '\"]').click();\n  Server.loadAlgorithm(category, algorithm).then(function (data) {\n    showAlgorithm(category, algorithm, data, file);\n  });\n};\n\n},{\"../server\":53,\"./show_algorithm\":19}],23:[function(require,module,exports){\n'use strict';\n\nvar showToast = function showToast(data, type) {\n  var $toast = $('<div class=\"toast ' + type + '\">').append(data);\n\n  $('.toast_container').append($toast);\n  setTimeout(function () {\n    $toast.fadeOut(function () {\n      $toast.remove();\n    });\n  }, 3000);\n};\n\nvar showErrorToast = function showErrorToast(err) {\n  showToast(err, 'error');\n};\n\nvar showInfoToast = function showInfoToast(err) {\n  showToast(err, 'info');\n};\n\nmodule.exports = {\n  showErrorToast: showErrorToast,\n  showInfoToast: showInfoToast\n};\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (id) {\n  var editor = ace.edit(id);\n\n  editor.setOptions({\n    enableBasicAutocompletion: true,\n    enableSnippets: true,\n    enableLiveAutocompletion: true\n  });\n\n  editor.setTheme('ace/theme/tomorrow_night_eighties');\n  editor.session.setMode('ace/mode/javascript');\n  editor.$blockScrolling = Infinity;\n\n  return editor;\n};\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\nvar execute = function execute(tracerManager, code) {\n  // all modules available to eval are obtained from window\n  try {\n    tracerManager.deallocateAll();\n    eval(code);\n    tracerManager.visualize();\n  } catch (err) {\n    return err;\n  } finally {\n    tracerManager.removeUnallocated();\n  }\n};\n\nvar executeData = function executeData(tracerManager, algoData) {\n  return execute(tracerManager, algoData);\n};\n\nvar executeDataAndCode = function executeDataAndCode(tracerManager, algoData, algoCode) {\n  return execute(tracerManager, algoData + ';' + algoCode);\n};\n\nmodule.exports = {\n  executeData: executeData,\n  executeDataAndCode: executeDataAndCode\n};\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nvar app = require('../app');\nvar createEditor = require('./create');\nvar Executor = require('./executor');\n\nfunction Editor(tracerManager) {\n  var _this = this;\n\n  if (!tracerManager) {\n    throw 'Cannot create Editor. Missing the tracerManager';\n  }\n\n  ace.require('ace/ext/language_tools');\n\n  this.dataEditor = createEditor('data');\n  this.codeEditor = createEditor('code');\n\n  // Setting data\n\n  this.setData = function (data) {\n    _this.dataEditor.setValue(data, -1);\n  };\n\n  this.setCode = function (code) {\n    _this.codeEditor.setValue(code, -1);\n  };\n\n  this.setContent = function (_ref) {\n    var data = _ref.data;\n    var code = _ref.code;\n\n    _this.setData(data);\n    _this.setCode(code);\n  };\n\n  // Clearing data\n\n  this.clearData = function () {\n    _this.dataEditor.setValue('');\n  };\n\n  this.clearCode = function () {\n    _this.codeEditor.setValue('');\n  };\n\n  this.clearContent = function () {\n    _this.clearData();\n    _this.clearCode();\n  };\n\n  this.execute = function () {\n    var data = _this.dataEditor.getValue();\n    var code = _this.codeEditor.getValue();\n    return Executor.executeDataAndCode(tracerManager, data, code);\n  };\n\n  // listeners\n\n  this.dataEditor.on('change', function () {\n    var data = _this.dataEditor.getValue();\n    var lastFileUsed = app.getLastFileUsed();\n    if (lastFileUsed) {\n      app.updateCachedFile(lastFileUsed, {\n        data: data\n      });\n    }\n    Executor.executeData(tracerManager, data);\n  });\n\n  this.codeEditor.on('change', function () {\n    var code = _this.codeEditor.getValue();\n    var lastFileUsed = app.getLastFileUsed();\n    if (lastFileUsed) {\n      app.updateCachedFile(lastFileUsed, {\n        code: code\n      });\n    }\n  });\n};\n\nmodule.exports = Editor;\n\n},{\"../app\":3,\"./create\":24,\"./executor\":25}],27:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar app = require('./app');\nvar AppConstructor = require('./app/constructor');\nvar DOM = require('./dom');\nvar Server = require('./server');\n\nvar modules = require('./module');\n\nvar _$ = $;\nvar extend = _$.extend;\n\n\n$.ajaxSetup({\n  cache: false,\n  dataType: 'text'\n});\n\nvar _require = require('./utils');\n\nvar isScratchPaper = _require.isScratchPaper;\n\nvar _require2 = require('./server/helpers');\n\nvar getPath = _require2.getPath;\n\n// set global promise error handler\n\nRSVP.on('error', function (reason) {\n  console.assert(false, reason);\n});\n\n$(function () {\n\n  // initialize the application and attach in to the instance module\n  var appConstructor = new AppConstructor();\n  extend(true, app, appConstructor);\n\n  // load modules to the global scope so they can be evaled\n  extend(true, window, modules);\n\n  Server.loadCategories().then(function (data) {\n    app.setCategories(data);\n    DOM.addCategories();\n\n    // determine if the app is loading a pre-existing scratch-pad\n    // or the home page\n\n    var _getPath = getPath();\n\n    var category = _getPath.category;\n    var algorithm = _getPath.algorithm;\n    var file = _getPath.file;\n\n    if (isScratchPaper(category)) {\n      if (algorithm) {\n        Server.loadScratchPaper(algorithm).then(function (_ref) {\n          var category = _ref.category;\n          var algorithm = _ref.algorithm;\n          var data = _ref.data;\n\n          DOM.showAlgorithm(category, algorithm, data);\n        });\n      } else {\n        Server.loadAlgorithm(category).then(function (data) {\n          DOM.showAlgorithm(category, null, data);\n        });\n      }\n    } else if (category && algorithm) {\n      DOM.showRequestedAlgorithm(category, algorithm, file);\n    } else {\n      DOM.showFirstAlgorithm();\n    }\n  });\n});\n\n},{\"./app\":3,\"./app/constructor\":2,\"./dom\":6,\"./module\":36,\"./server\":53,\"./server/helpers\":52,\"./utils\":65,\"rsvp\":67}],28:[function(require,module,exports){\n'use strict';\n\nvar Array2D = require('./array2d');\n\nvar random = function random(N, min, max) {\n  return Array2D.random(1, N, min, max)[0];\n};\n\nvar randomSorted = function randomSorted(N, min, max) {\n  return Array2D.randomSorted(1, N, min, max)[0];\n};\n\nmodule.exports = {\n  random: random,\n  randomSorted: randomSorted\n};\n\n},{\"./array2d\":29}],29:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, M, min, max) {\n  if (!N) N = 10;\n  if (!M) M = 10;\n  if (min === undefined) min = 1;\n  if (max === undefined) max = 9;\n  var D = [];\n  for (var i = 0; i < N; i++) {\n    D.push([]);\n    for (var j = 0; j < M; j++) {\n      D[i].push((Math.random() * (max - min + 1) | 0) + min);\n    }\n  }\n  return D;\n};\n\nvar randomSorted = function randomSorted(N, M, min, max) {\n  return random(N, M, min, max).map(function (arr) {\n    return arr.sort(function (a, b) {\n      return a - b;\n    });\n  });\n};\n\nmodule.exports = {\n  random: random,\n  randomSorted: randomSorted\n};\n\n},{}],30:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, min, max) {\n  if (!N) N = 7;\n  if (!min) min = 1;\n  if (!max) max = 10;\n  var C = new Array(N);\n  for (var i = 0; i < N; i++) {\n    C[i] = new Array(2);\n  }for (var i = 0; i < N; i++) {\n    for (var j = 0; j < C[i].length; j++) {\n      C[i][j] = (Math.random() * (max - min + 1) | 0) + min;\n    }\n  }return C;\n};\n\nmodule.exports = {\n  random: random\n};\n\n},{}],31:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, ratio) {\n  if (!N) N = 5;\n  if (!ratio) ratio = .3;\n  var G = new Array(N);\n  for (var i = 0; i < N; i++) {\n    G[i] = new Array(N);\n    for (var j = 0; j < N; j++) {\n      if (i != j) {\n        G[i][j] = (Math.random() * (1 / ratio) | 0) == 0 ? 1 : 0;\n      }\n    }\n  }\n  return G;\n};\n\nmodule.exports = {\n  random: random\n};\n\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar Array1D = require('./array1d');\nvar Array2D = require('./array2d');\nvar CoordinateSystem = require('./coordinate_system');\nvar DirectedGraph = require('./directed_graph');\nvar UndirectedGraph = require('./undirected_graph');\nvar WeightedDirectedGraph = require('./weighted_directed_graph');\nvar WeightedUndirectedGraph = require('./weighted_undirected_graph');\n\nmodule.exports = {\n  Array1D: Array1D,\n  Array2D: Array2D,\n  CoordinateSystem: CoordinateSystem,\n  DirectedGraph: DirectedGraph,\n  UndirectedGraph: UndirectedGraph,\n  WeightedDirectedGraph: WeightedDirectedGraph,\n  WeightedUndirectedGraph: WeightedUndirectedGraph\n};\n\n},{\"./array1d\":28,\"./array2d\":29,\"./coordinate_system\":30,\"./directed_graph\":31,\"./undirected_graph\":33,\"./weighted_directed_graph\":34,\"./weighted_undirected_graph\":35}],33:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, ratio) {\n  if (!N) N = 5;\n  if (!ratio) ratio = .3;\n  var G = new Array(N);\n  for (var i = 0; i < N; i++) {\n    G[i] = new Array(N);\n  }for (var i = 0; i < N; i++) {\n    for (var j = 0; j < N; j++) {\n      if (i > j) {\n        G[i][j] = G[j][i] = (Math.random() * (1 / ratio) | 0) == 0 ? 1 : 0;\n      }\n    }\n  }\n  return G;\n};\n\nmodule.exports = {\n  random: random\n};\n\n},{}],34:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, ratio, min, max) {\n  if (!N) N = 5;\n  if (!ratio) ratio = .3;\n  if (!min) min = 1;\n  if (!max) max = 5;\n  var G = new Array(N);\n  for (var i = 0; i < N; i++) {\n    G[i] = new Array(N);\n    for (var j = 0; j < N; j++) {\n      if (i != j && (Math.random() * (1 / ratio) | 0) == 0) {\n        G[i][j] = (Math.random() * (max - min + 1) | 0) + min;\n      }\n    }\n  }\n  return G;\n};\n\nmodule.exports = {\n  random: random\n};\n\n},{}],35:[function(require,module,exports){\n\"use strict\";\n\nvar random = function random(N, ratio, min, max) {\n  if (!N) N = 5;\n  if (!ratio) ratio = .3;\n  if (!min) min = 1;\n  if (!max) max = 5;\n  var G = new Array(N);\n  for (var i = 0; i < N; i++) {\n    G[i] = new Array(N);\n  }for (var i = 0; i < N; i++) {\n    for (var j = 0; j < N; j++) {\n      if (i > j && (Math.random() * (1 / ratio) | 0) == 0) {\n        G[i][j] = G[j][i] = (Math.random() * (max - min + 1) | 0) + min;\n      }\n    }\n  }\n  return G;\n};\n\nmodule.exports = {\n  random: random\n};\n\n},{}],36:[function(require,module,exports){\n'use strict';\n\nvar tracers = require('./tracer');\nvar datas = require('./data');\n\nvar _$ = $;\nvar extend = _$.extend;\n\n\nmodule.exports = extend(true, {}, tracers, datas);\n\n},{\"./data\":32,\"./tracer\":42}],37:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Array2DTracer = require('./array2d');\n\nvar Array1DTracer = function (_Array2DTracer) {\n  _inherits(Array1DTracer, _Array2DTracer);\n\n  _createClass(Array1DTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'Array1DTracer';\n    }\n  }]);\n\n  function Array1DTracer(name) {\n    _classCallCheck(this, Array1DTracer);\n\n    return _possibleConstructorReturn(this, Object.getPrototypeOf(Array1DTracer).call(this, name));\n  }\n\n  _createClass(Array1DTracer, [{\n    key: '_notify',\n    value: function _notify(idx, v) {\n      _get(Object.getPrototypeOf(Array1DTracer.prototype), '_notify', this).call(this, 0, idx, v);\n      return this;\n    }\n  }, {\n    key: '_denotify',\n    value: function _denotify(idx) {\n      _get(Object.getPrototypeOf(Array1DTracer.prototype), '_denotify', this).call(this, 0, idx);\n      return this;\n    }\n  }, {\n    key: '_select',\n    value: function _select(s, e) {\n      if (e === undefined) {\n        _get(Object.getPrototypeOf(Array1DTracer.prototype), '_select', this).call(this, 0, s);\n      } else {\n        _get(Object.getPrototypeOf(Array1DTracer.prototype), '_selectRow', this).call(this, 0, s, e);\n      }\n      return this;\n    }\n  }, {\n    key: '_deselect',\n    value: function _deselect(s, e) {\n      if (e === undefined) {\n        _get(Object.getPrototypeOf(Array1DTracer.prototype), '_deselect', this).call(this, 0, s);\n      } else {\n        _get(Object.getPrototypeOf(Array1DTracer.prototype), '_deselectRow', this).call(this, 0, s, e);\n      }\n      return this;\n    }\n  }, {\n    key: 'setData',\n    value: function setData(D) {\n      return _get(Object.getPrototypeOf(Array1DTracer.prototype), 'setData', this).call(this, [D]);\n    }\n  }]);\n\n  return Array1DTracer;\n}(Array2DTracer);\n\nmodule.exports = Array1DTracer;\n\n},{\"./array2d\":38}],38:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tracer = require('./tracer');\n\nvar _require = require('../../tracer_manager/util/index');\n\nvar refineByType = _require.refineByType;\n\nvar Array2DTracer = function (_Tracer) {\n  _inherits(Array2DTracer, _Tracer);\n\n  _createClass(Array2DTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'Array2DTracer';\n    }\n  }]);\n\n  function Array2DTracer(name) {\n    _classCallCheck(this, Array2DTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Array2DTracer).call(this, name));\n\n    _this.colorClass = {\n      selected: 'selected',\n      notified: 'notified'\n    };\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(Array2DTracer, [{\n    key: '_notify',\n    value: function _notify(x, y, v) {\n      this.manager.pushStep(this.capsule, {\n        type: 'notify',\n        x: x,\n        y: y,\n        v: v\n      });\n      return this;\n    }\n  }, {\n    key: '_denotify',\n    value: function _denotify(x, y) {\n      this.manager.pushStep(this.capsule, {\n        type: 'denotify',\n        x: x,\n        y: y\n      });\n      return this;\n    }\n  }, {\n    key: '_select',\n    value: function _select(sx, sy, ex, ey) {\n      this.pushSelectingStep('select', null, arguments);\n      return this;\n    }\n  }, {\n    key: '_selectRow',\n    value: function _selectRow(x, sy, ey) {\n      this.pushSelectingStep('select', 'row', arguments);\n      return this;\n    }\n  }, {\n    key: '_selectCol',\n    value: function _selectCol(y, sx, ex) {\n      this.pushSelectingStep('select', 'col', arguments);\n      return this;\n    }\n  }, {\n    key: '_deselect',\n    value: function _deselect(sx, sy, ex, ey) {\n      this.pushSelectingStep('deselect', null, arguments);\n      return this;\n    }\n  }, {\n    key: '_deselectRow',\n    value: function _deselectRow(x, sy, ey) {\n      this.pushSelectingStep('deselect', 'row', arguments);\n      return this;\n    }\n  }, {\n    key: '_deselectCol',\n    value: function _deselectCol(y, sx, ex) {\n      this.pushSelectingStep('deselect', 'col', arguments);\n      return this;\n    }\n  }, {\n    key: '_separate',\n    value: function _separate(x, y) {\n      this.manager.pushStep(this.capsule, {\n        type: 'separate',\n        x: x,\n        y: y\n      });\n      return this;\n    }\n  }, {\n    key: '_separateRow',\n    value: function _separateRow(x) {\n      this._separate(x, -1);\n      return this;\n    }\n  }, {\n    key: '_separateCol',\n    value: function _separateCol(y) {\n      this._separate(-1, y);\n      return this;\n    }\n  }, {\n    key: '_deseparate',\n    value: function _deseparate(x, y) {\n      this.manager.pushStep(this.capsule, {\n        type: 'deseparate',\n        x: x,\n        y: y\n      });\n      return this;\n    }\n  }, {\n    key: '_deseparateRow',\n    value: function _deseparateRow(x) {\n      this._deseparate(x, -1);\n      return this;\n    }\n  }, {\n    key: '_deseparateCol',\n    value: function _deseparateCol(y) {\n      this._deseparate(-1, y);\n      return this;\n    }\n  }, {\n    key: 'pushSelectingStep',\n    value: function pushSelectingStep() {\n      var args = Array.prototype.slice.call(arguments);\n      var type = args.shift();\n      var mode = args.shift();\n      args = Array.prototype.slice.call(args.shift());\n      var coord;\n      switch (mode) {\n        case 'row':\n          coord = {\n            x: args[0],\n            sy: args[1],\n            ey: args[2]\n          };\n          break;\n        case 'col':\n          coord = {\n            y: args[0],\n            sx: args[1],\n            ex: args[2]\n          };\n          break;\n        default:\n          if (args[2] === undefined && args[3] === undefined) {\n            coord = {\n              x: args[0],\n              y: args[1]\n            };\n          } else {\n            coord = {\n              sx: args[0],\n              sy: args[1],\n              ex: args[2],\n              ey: args[3]\n            };\n          }\n      }\n      var step = {\n        type: type\n      };\n      $.extend(step, coord);\n      this.manager.pushStep(this.capsule, step);\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'notify':\n          if (step.v !== undefined) {\n            var $row = this.$table.find('.mtbl-row').eq(step.x);\n            var $col = $row.find('.mtbl-col').eq(step.y);\n            $col.text(refineByType(step.v));\n          }\n        case 'denotify':\n        case 'select':\n        case 'deselect':\n          var colorClass = step.type == 'select' || step.type == 'deselect' ? this.colorClass.selected : this.colorClass.notified;\n          var addClass = step.type == 'select' || step.type == 'notify';\n          var sx = step.sx;\n          var sy = step.sy;\n          var ex = step.ex;\n          var ey = step.ey;\n          if (sx === undefined) sx = step.x;\n          if (sy === undefined) sy = step.y;\n          if (ex === undefined) ex = step.x;\n          if (ey === undefined) ey = step.y;\n          this.paintColor(sx, sy, ex, ey, colorClass, addClass);\n          break;\n        case 'separate':\n          this.deseparate(step.x, step.y);\n          this.separate(step.x, step.y);\n          break;\n        case 'deseparate':\n          this.deseparate(step.x, step.y);\n          break;\n        default:\n          _get(Object.getPrototypeOf(Array2DTracer.prototype), 'processStep', this).call(this, step, options);\n      }\n    }\n  }, {\n    key: 'setData',\n    value: function setData(D) {\n      this.viewX = this.viewY = 0;\n      this.paddingH = 6;\n      this.paddingV = 3;\n      this.fontSize = 16;\n\n      if (_get(Object.getPrototypeOf(Array2DTracer.prototype), 'setData', this).apply(this, arguments)) {\n        this.$table.find('.mtbl-row').each(function (i) {\n          $(this).find('.mtbl-col').each(function (j) {\n            $(this).text(refineByType(D[i][j]));\n          });\n        });\n        return true;\n      }\n\n      this.$table.empty();\n      for (var i = 0; i < D.length; i++) {\n        var $row = $('<div class=\"mtbl-row\">');\n        this.$table.append($row);\n        for (var j = 0; j < D[i].length; j++) {\n          var $col = $('<div class=\"mtbl-col\">').css(this.getCellCss()).text(refineByType(D[i][j]));\n          $row.append($col);\n        }\n      }\n      this.resize();\n\n      return false;\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'resize', this).call(this);\n\n      this.refresh();\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'clear', this).call(this);\n\n      this.clearColor();\n      this.deseparateAll();\n    }\n  }, {\n    key: 'getCellCss',\n    value: function getCellCss() {\n      return {\n        padding: this.paddingV.toFixed(1) + 'px ' + this.paddingH.toFixed(1) + 'px',\n        'font-size': this.fontSize.toFixed(1) + 'px'\n      };\n    }\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'refresh', this).call(this);\n\n      var $parent = this.$table.parent();\n      var top = $parent.height() / 2 - this.$table.height() / 2 + this.viewY;\n      var left = $parent.width() / 2 - this.$table.width() / 2 + this.viewX;\n      this.$table.css('margin-top', top);\n      this.$table.css('margin-left', left);\n    }\n  }, {\n    key: 'mousedown',\n    value: function mousedown(e) {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'mousedown', this).call(this, e);\n\n      this.dragX = e.pageX;\n      this.dragY = e.pageY;\n      this.dragging = true;\n    }\n  }, {\n    key: 'mousemove',\n    value: function mousemove(e) {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'mousemove', this).call(this, e);\n\n      if (this.dragging) {\n        this.viewX += e.pageX - this.dragX;\n        this.viewY += e.pageY - this.dragY;\n        this.dragX = e.pageX;\n        this.dragY = e.pageY;\n        this.refresh();\n      }\n    }\n  }, {\n    key: 'mouseup',\n    value: function mouseup(e) {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'mouseup', this).call(this, e);\n\n      this.dragging = false;\n    }\n  }, {\n    key: 'mousewheel',\n    value: function mousewheel(e) {\n      _get(Object.getPrototypeOf(Array2DTracer.prototype), 'mousewheel', this).call(this, e);\n\n      e.preventDefault();\n      e = e.originalEvent;\n      var delta = e.wheelDelta !== undefined && e.wheelDelta || e.detail !== undefined && -e.detail;\n      var weight = 1.01;\n      var ratio = delta > 0 ? 1 / weight : weight;\n      if (this.fontSize < 4 && ratio < 1) return;\n      if (this.fontSize > 40 && ratio > 1) return;\n      this.paddingV *= ratio;\n      this.paddingH *= ratio;\n      this.fontSize *= ratio;\n      this.$table.find('.mtbl-col').css(this.getCellCss());\n      this.refresh();\n    }\n  }, {\n    key: 'paintColor',\n    value: function paintColor(sx, sy, ex, ey, colorClass, addClass) {\n      for (var i = sx; i <= ex; i++) {\n        var $row = this.$table.find('.mtbl-row').eq(i);\n        for (var j = sy; j <= ey; j++) {\n          var $col = $row.find('.mtbl-col').eq(j);\n          if (addClass) $col.addClass(colorClass);else $col.removeClass(colorClass);\n        }\n      }\n    }\n  }, {\n    key: 'clearColor',\n    value: function clearColor() {\n      this.$table.find('.mtbl-col').removeClass(Object.keys(this.colorClass).join(' '));\n    }\n  }, {\n    key: 'separate',\n    value: function separate(x, y) {\n      this.$table.find('.mtbl-row').each(function (i) {\n        var $row = $(this);\n        if (i == x) {\n          $row.after($('<div class=\"mtbl-empty-row\">').attr('data-row', i));\n        }\n        $row.find('.mtbl-col').each(function (j) {\n          var $col = $(this);\n          if (j == y) {\n            $col.after($('<div class=\"mtbl-empty-col\">').attr('data-col', j));\n          }\n        });\n      });\n    }\n  }, {\n    key: 'deseparate',\n    value: function deseparate(x, y) {\n      this.$table.find('[data-row=' + x + ']').remove();\n      this.$table.find('[data-col=' + y + ']').remove();\n    }\n  }, {\n    key: 'deseparateAll',\n    value: function deseparateAll() {\n      this.$table.find('.mtbl-empty-row, .mtbl-empty-col').remove();\n    }\n  }]);\n\n  return Array2DTracer;\n}(Tracer);\n\nvar initView = function initView(tracer) {\n  tracer.$table = tracer.capsule.$table = $('<div class=\"mtbl-table\">');\n  tracer.$container.append(tracer.$table);\n};\n\nmodule.exports = Array2DTracer;\n\n},{\"../../tracer_manager/util/index\":62,\"./tracer\":44}],39:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tracer = require('./tracer');\n\nvar ChartTracer = function (_Tracer) {\n  _inherits(ChartTracer, _Tracer);\n\n  _createClass(ChartTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'ChartTracer';\n    }\n  }]);\n\n  function ChartTracer(name) {\n    _classCallCheck(this, ChartTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ChartTracer).call(this, name));\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(ChartTracer, [{\n    key: 'setData',\n    value: function setData(C) {\n      if (_get(Object.getPrototypeOf(ChartTracer.prototype), 'setData', this).apply(this, arguments)) return true;\n\n      if (this.chart) this.chart.destroy();\n      var color = [];\n      for (var i = 0; i < C.length; i++) {\n        color.push('rgba(136, 136, 136, 1)');\n      }var data = {\n        type: 'bar',\n        data: {\n          labels: C.map(String),\n          datasets: [{\n            backgroundColor: color,\n            data: C\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          },\n          animation: false,\n          legend: false,\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      };\n      this.chart = this.capsule.chart = new Chart(this.$wrapper, data);\n    }\n  }, {\n    key: '_notify',\n    value: function _notify(s, v) {\n      this.manager.pushStep(this.capsule, {\n        type: 'notify',\n        s: s,\n        v: v\n      });\n      return this;\n    }\n  }, {\n    key: '_denotify',\n    value: function _denotify(s) {\n      this.manager.pushStep(this.capsule, {\n        type: 'denotify',\n        s: s\n      });\n      return this;\n    }\n  }, {\n    key: '_select',\n    value: function _select(s, e) {\n      this.manager.pushStep(this.capsule, {\n        type: 'select',\n        s: s,\n        e: e\n      });\n      return this;\n    }\n  }, {\n    key: '_deselect',\n    value: function _deselect(s, e) {\n      this.manager.pushStep(this.capsule, {\n        type: 'deselect',\n        s: s,\n        e: e\n      });\n      return this;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'notify':\n          if (step.v !== undefined) {\n            this.chart.config.data.datasets[0].data[step.s] = step.v;\n            this.chart.config.data.labels[step.s] = step.v.toString();\n          }\n        case 'denotify':\n        case 'deselect':\n          var color = step.type == 'denotify' || step.type == 'deselect' ? 'rgba(136, 136, 136, 1)' : 'rgba(255, 0, 0, 1)';\n        case 'select':\n          if (color === undefined) var color = 'rgba(0, 0, 255, 1)';\n          if (step.e !== undefined) for (var i = step.s; i <= step.e; i++) {\n            this.chart.config.data.datasets[0].backgroundColor[i] = color;\n          } else this.chart.config.data.datasets[0].backgroundColor[step.s] = color;\n          this.chart.update();\n          break;\n        default:\n          _get(Object.getPrototypeOf(ChartTracer.prototype), 'processStep', this).call(this, step, options);\n      }\n    }\n  }]);\n\n  return ChartTracer;\n}(Tracer);\n\nvar initView = function initView(tracer) {\n  tracer.$wrapper = tracer.capsule.$wrapper = $('<canvas class=\"mchrt-chart\">');\n  tracer.$container.append(tracer.$wrapper);\n};\n\nmodule.exports = ChartTracer;\n\n},{\"./tracer\":44}],40:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DirectedGraphTracer = require('./directed_graph');\n\nvar CoordinateSystemTracer = function (_DirectedGraphTracer) {\n  _inherits(CoordinateSystemTracer, _DirectedGraphTracer);\n\n  _createClass(CoordinateSystemTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'CoordinateSystemTracer';\n    }\n  }]);\n\n  function CoordinateSystemTracer(name) {\n    _classCallCheck(this, CoordinateSystemTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CoordinateSystemTracer).call(this, name));\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(CoordinateSystemTracer, [{\n    key: 'setData',\n    value: function setData(C) {\n      if (Tracer.prototype.setData.apply(this, arguments)) return true;\n\n      this.graph.clear();\n      var nodes = [];\n      var edges = [];\n      for (var i = 0; i < C.length; i++) {\n        nodes.push({\n          id: this.n(i),\n          x: C[i][0],\n          y: C[i][1],\n          label: '' + i,\n          size: 1,\n          color: this.color.default\n        });\n      }this.graph.read({\n        nodes: nodes,\n        edges: edges\n      });\n      this.s.camera.goTo({\n        x: 0,\n        y: 0,\n        angle: 0,\n        ratio: 1\n      });\n      this.refresh();\n\n      return false;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'visit':\n        case 'leave':\n          var visit = step.type == 'visit';\n          var targetNode = this.graph.nodes(this.n(step.target));\n          var color = visit ? this.color.visited : this.color.left;\n          targetNode.color = color;\n          if (step.source !== undefined) {\n            var edgeId = this.e(step.source, step.target);\n            if (this.graph.edges(edgeId)) {\n              var edge = this.graph.edges(edgeId);\n              edge.color = color;\n              this.graph.dropEdge(edgeId).addEdge(edge);\n            } else {\n              this.graph.addEdge({\n                id: this.e(step.target, step.source),\n                source: this.n(step.source),\n                target: this.n(step.target),\n                color: color,\n                size: 1\n              });\n            }\n          }\n          if (this.logTracer) {\n            var source = step.source;\n            if (source === undefined) source = '';\n            this.logTracer.print(visit ? source + ' -> ' + step.target : source + ' <- ' + step.target);\n          }\n          break;\n        default:\n          _get(Object.getPrototypeOf(CoordinateSystemTracer.prototype), 'processStep', this).call(this, step, options);\n      }\n    }\n  }, {\n    key: 'e',\n    value: function e(v1, v2) {\n      if (v1 > v2) {\n        var temp = v1;\n        v1 = v2;\n        v2 = temp;\n      }\n      return 'e' + v1 + '_' + v2;\n    }\n  }, {\n    key: 'drawOnHover',\n    value: function drawOnHover(node, context, settings, next) {\n      var tracer = this;\n\n      context.setLineDash([5, 5]);\n      var nodeIdx = node.id.substring(1);\n      this.graph.edges().forEach(function (edge) {\n        var ends = edge.id.substring(1).split(\"_\");\n        if (ends[0] == nodeIdx) {\n          var color = '#0ff';\n          var source = node;\n          var target = tracer.graph.nodes('n' + ends[1]);\n          tracer.drawEdge(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        } else if (ends[1] == nodeIdx) {\n          var color = '#0ff';\n          var source = tracer.graph.nodes('n' + ends[0]);\n          var target = node;\n          tracer.drawEdge(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        }\n      });\n    }\n  }, {\n    key: 'drawEdge',\n    value: function drawEdge(edge, source, target, color, context, settings) {\n      var prefix = settings('prefix') || '',\n          size = edge[prefix + 'size'] || 1;\n\n      context.strokeStyle = color;\n      context.lineWidth = size;\n      context.beginPath();\n      context.moveTo(source[prefix + 'x'], source[prefix + 'y']);\n      context.lineTo(target[prefix + 'x'], target[prefix + 'y']);\n      context.stroke();\n    }\n  }]);\n\n  return CoordinateSystemTracer;\n}(DirectedGraphTracer);\n\nvar initView = function initView(tracer) {\n  tracer.s.settings({\n    defaultEdgeType: 'def',\n    funcEdgesDef: function funcEdgesDef(edge, source, target, context, settings) {\n      var color = tracer.getColor(edge, source, target, settings);\n      tracer.drawEdge(edge, source, target, color, context, settings);\n    }\n  });\n};\n\nmodule.exports = CoordinateSystemTracer;\n\n},{\"./directed_graph\":41}],41:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tracer = require('./tracer');\n\nvar _require = require('../../tracer_manager/util/index');\n\nvar refineByType = _require.refineByType;\n\nvar DirectedGraphTracer = function (_Tracer) {\n  _inherits(DirectedGraphTracer, _Tracer);\n\n  _createClass(DirectedGraphTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'DirectedGraphTracer';\n    }\n  }]);\n\n  function DirectedGraphTracer(name) {\n    _classCallCheck(this, DirectedGraphTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DirectedGraphTracer).call(this, name));\n\n    _this.color = {\n      visited: '#f00',\n      left: '#000',\n      default: '#888'\n    };\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(DirectedGraphTracer, [{\n    key: '_setTreeData',\n    value: function _setTreeData(G, root) {\n      this.manager.pushStep(this.capsule, {\n        type: 'setTreeData',\n        arguments: arguments\n      });\n      return this;\n    }\n  }, {\n    key: '_visit',\n    value: function _visit(target, source) {\n      this.manager.pushStep(this.capsule, {\n        type: 'visit',\n        target: target,\n        source: source\n      });\n      return this;\n    }\n  }, {\n    key: '_leave',\n    value: function _leave(target, source) {\n      this.manager.pushStep(this.capsule, {\n        type: 'leave',\n        target: target,\n        source: source\n      });\n      return this;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'setTreeData':\n          this.setTreeData.apply(this, step.arguments);\n          break;\n        case 'visit':\n        case 'leave':\n          var visit = step.type == 'visit';\n          var targetNode = this.graph.nodes(this.n(step.target));\n          var color = visit ? this.color.visited : this.color.left;\n          targetNode.color = color;\n          if (step.source !== undefined) {\n            var edgeId = this.e(step.source, step.target);\n            var edge = this.graph.edges(edgeId);\n            edge.color = color;\n            this.graph.dropEdge(edgeId).addEdge(edge);\n          }\n          if (this.logTracer) {\n            var source = step.source;\n            if (source === undefined) source = '';\n            this.logTracer.print(visit ? source + ' -> ' + step.target : source + ' <- ' + step.target);\n          }\n          break;\n        default:\n          _get(Object.getPrototypeOf(DirectedGraphTracer.prototype), 'processStep', this).call(this, step, options);\n      }\n    }\n  }, {\n    key: 'setTreeData',\n    value: function setTreeData(G, root) {\n      var tracer = this;\n\n      root = root || 0;\n      var maxDepth = -1;\n\n      var chk = new Array(G.length);\n      var getDepth = function getDepth(node, depth) {\n        if (chk[node]) throw \"the given graph is not a tree because it forms a circuit\";\n        chk[node] = true;\n        if (maxDepth < depth) maxDepth = depth;\n        for (var i = 0; i < G[node].length; i++) {\n          if (G[node][i]) getDepth(i, depth + 1);\n        }\n      };\n      getDepth(root, 1);\n\n      if (this.setData(G)) return true;\n\n      var place = function place(node, x, y) {\n        var temp = tracer.graph.nodes(tracer.n(node));\n        temp.x = x;\n        temp.y = y;\n      };\n\n      var wgap = 1 / (maxDepth - 1);\n      var dfs = function dfs(node, depth, top, bottom) {\n        place(node, top + bottom, depth * wgap);\n        var children = 0;\n        for (var i = 0; i < G[node].length; i++) {\n          if (G[node][i]) children++;\n        }\n        var vgap = (bottom - top) / children;\n        var cnt = 0;\n        for (var i = 0; i < G[node].length; i++) {\n          if (G[node][i]) dfs(i, depth + 1, top + vgap * cnt, top + vgap * ++cnt);\n        }\n      };\n      dfs(root, 0, 0, 1);\n\n      this.refresh();\n    }\n  }, {\n    key: 'setData',\n    value: function setData(G, undirected) {\n      if (_get(Object.getPrototypeOf(DirectedGraphTracer.prototype), 'setData', this).apply(this, arguments)) return true;\n\n      this.graph.clear();\n      var nodes = [];\n      var edges = [];\n      var unitAngle = 2 * Math.PI / G.length;\n      var currentAngle = 0;\n      for (var i = 0; i < G.length; i++) {\n        currentAngle += unitAngle;\n        nodes.push({\n          id: this.n(i),\n          label: '' + i,\n          x: .5 + Math.sin(currentAngle) / 2,\n          y: .5 + Math.cos(currentAngle) / 2,\n          size: 1,\n          color: this.color.default,\n          weight: 0\n        });\n\n        if (undirected) {\n          for (var j = 0; j <= i; j++) {\n            if (G[i][j] || G[j][i]) {\n              edges.push({\n                id: this.e(i, j),\n                source: this.n(i),\n                target: this.n(j),\n                color: this.color.default,\n                size: 1,\n                weight: refineByType(G[i][j])\n              });\n            }\n          }\n        } else {\n          for (var _j = 0; _j < G[i].length; _j++) {\n            if (G[i][_j]) {\n              edges.push({\n                id: this.e(i, _j),\n                source: this.n(i),\n                target: this.n(_j),\n                color: this.color.default,\n                size: 1,\n                weight: refineByType(G[i][_j])\n              });\n            }\n          }\n        }\n      }\n\n      this.graph.read({\n        nodes: nodes,\n        edges: edges\n      });\n      this.s.camera.goTo({\n        x: 0,\n        y: 0,\n        angle: 0,\n        ratio: 1\n      });\n      this.refresh();\n\n      return false;\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      _get(Object.getPrototypeOf(DirectedGraphTracer.prototype), 'resize', this).call(this);\n\n      this.s.renderers[0].resize();\n      this.refresh();\n    }\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      _get(Object.getPrototypeOf(DirectedGraphTracer.prototype), 'refresh', this).call(this);\n\n      this.s.refresh();\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      _get(Object.getPrototypeOf(DirectedGraphTracer.prototype), 'clear', this).call(this);\n\n      this.clearGraphColor();\n    }\n  }, {\n    key: 'clearGraphColor',\n    value: function clearGraphColor() {\n      var tracer = this;\n\n      this.graph.nodes().forEach(function (node) {\n        node.color = tracer.color.default;\n      });\n      this.graph.edges().forEach(function (edge) {\n        edge.color = tracer.color.default;\n      });\n    }\n  }, {\n    key: 'n',\n    value: function n(v) {\n      return 'n' + v;\n    }\n  }, {\n    key: 'e',\n    value: function e(v1, v2) {\n      return 'e' + v1 + '_' + v2;\n    }\n  }, {\n    key: 'getColor',\n    value: function getColor(edge, source, target, settings) {\n      var color = edge.color,\n          edgeColor = settings('edgeColor'),\n          defaultNodeColor = settings('defaultNodeColor'),\n          defaultEdgeColor = settings('defaultEdgeColor');\n      if (!color) switch (edgeColor) {\n        case 'source':\n          color = source.color || defaultNodeColor;\n          break;\n        case 'target':\n          color = target.color || defaultNodeColor;\n          break;\n        default:\n          color = defaultEdgeColor;\n          break;\n      }\n\n      return color;\n    }\n  }, {\n    key: 'drawLabel',\n    value: function drawLabel(node, context, settings) {\n      var fontSize,\n          prefix = settings('prefix') || '',\n          size = node[prefix + 'size'];\n\n      if (size < settings('labelThreshold')) return;\n\n      if (!node.label || typeof node.label !== 'string') return;\n\n      fontSize = settings('labelSize') === 'fixed' ? settings('defaultLabelSize') : settings('labelSizeRatio') * size;\n\n      context.font = (settings('fontStyle') ? settings('fontStyle') + ' ' : '') + fontSize + 'px ' + settings('font');\n      context.fillStyle = settings('labelColor') === 'node' ? node.color || settings('defaultNodeColor') : settings('defaultLabelColor');\n\n      context.textAlign = 'center';\n      context.fillText(node.label, Math.round(node[prefix + 'x']), Math.round(node[prefix + 'y'] + fontSize / 3));\n    }\n  }, {\n    key: 'drawArrow',\n    value: function drawArrow(edge, source, target, color, context, settings) {\n      var prefix = settings('prefix') || '',\n          size = edge[prefix + 'size'] || 1,\n          tSize = target[prefix + 'size'],\n          sX = source[prefix + 'x'],\n          sY = source[prefix + 'y'],\n          tX = target[prefix + 'x'],\n          tY = target[prefix + 'y'],\n          angle = Math.atan2(tY - sY, tX - sX),\n          dist = 3;\n      sX += Math.sin(angle) * dist;\n      tX += Math.sin(angle) * dist;\n      sY += -Math.cos(angle) * dist;\n      tY += -Math.cos(angle) * dist;\n      var aSize = Math.max(size * 2.5, settings('minArrowSize')),\n          d = Math.sqrt(Math.pow(tX - sX, 2) + Math.pow(tY - sY, 2)),\n          aX = sX + (tX - sX) * (d - aSize - tSize) / d,\n          aY = sY + (tY - sY) * (d - aSize - tSize) / d,\n          vX = (tX - sX) * aSize / d,\n          vY = (tY - sY) * aSize / d;\n\n      context.strokeStyle = color;\n      context.lineWidth = size;\n      context.beginPath();\n      context.moveTo(sX, sY);\n      context.lineTo(aX, aY);\n      context.stroke();\n\n      context.fillStyle = color;\n      context.beginPath();\n      context.moveTo(aX + vX, aY + vY);\n      context.lineTo(aX + vY * 0.6, aY - vX * 0.6);\n      context.lineTo(aX - vY * 0.6, aY + vX * 0.6);\n      context.lineTo(aX + vX, aY + vY);\n      context.closePath();\n      context.fill();\n    }\n  }, {\n    key: 'drawOnHover',\n    value: function drawOnHover(node, context, settings, next) {\n      var tracer = this;\n\n      context.setLineDash([5, 5]);\n      var nodeIdx = node.id.substring(1);\n      this.graph.edges().forEach(function (edge) {\n        var ends = edge.id.substring(1).split(\"_\");\n        if (ends[0] == nodeIdx) {\n          var color = '#0ff';\n          var source = node;\n          var target = tracer.graph.nodes('n' + ends[1]);\n          tracer.drawArrow(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        } else if (ends[1] == nodeIdx) {\n          var color = '#ff0';\n          var source = tracer.graph.nodes('n' + ends[0]);\n          var target = node;\n          tracer.drawArrow(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        }\n      });\n    }\n  }]);\n\n  return DirectedGraphTracer;\n}(Tracer);\n\nvar initView = function initView(tracer) {\n  tracer.s = tracer.capsule.s = new sigma({\n    renderer: {\n      container: tracer.$container[0],\n      type: 'canvas'\n    },\n    settings: {\n      minArrowSize: 8,\n      defaultEdgeType: 'arrow',\n      maxEdgeSize: 2.5,\n      labelThreshold: 4,\n      font: 'Roboto',\n      defaultLabelColor: '#fff',\n      zoomMin: 0.6,\n      zoomMax: 1.2,\n      skipErrors: true,\n      minNodeSize: .5,\n      maxNodeSize: 12,\n      labelSize: 'proportional',\n      labelSizeRatio: 1.3,\n      funcLabelsDef: function funcLabelsDef(node, context, settings) {\n        tracer.drawLabel(node, context, settings);\n      },\n      funcHoversDef: function funcHoversDef(node, context, settings, next) {\n        tracer.drawOnHover(node, context, settings, next);\n      },\n      funcEdgesArrow: function funcEdgesArrow(edge, source, target, context, settings) {\n        var color = tracer.getColor(edge, source, target, settings);\n        tracer.drawArrow(edge, source, target, color, context, settings);\n      }\n    }\n  });\n  sigma.plugins.dragNodes(tracer.s, tracer.s.renderers[0]);\n  tracer.graph = tracer.capsule.graph = tracer.s.graph;\n};\n\nsigma.canvas.labels.def = function (node, context, settings) {\n  var func = settings('funcLabelsDef');\n  if (func) {\n    func(node, context, settings);\n  }\n};\nsigma.canvas.hovers.def = function (node, context, settings) {\n  var func = settings('funcHoversDef');\n  if (func) {\n    func(node, context, settings);\n  }\n};\nsigma.canvas.edges.def = function (edge, source, target, context, settings) {\n  var func = settings('funcEdgesDef');\n  if (func) {\n    func(edge, source, target, context, settings);\n  }\n};\nsigma.canvas.edges.arrow = function (edge, source, target, context, settings) {\n  var func = settings('funcEdgesArrow');\n  if (func) {\n    func(edge, source, target, context, settings);\n  }\n};\n\nmodule.exports = DirectedGraphTracer;\n\n},{\"../../tracer_manager/util/index\":62,\"./tracer\":44}],42:[function(require,module,exports){\n'use strict';\n\nvar Tracer = require('./tracer');\nvar LogTracer = require('./log');\nvar Array1DTracer = require('./array1d');\nvar Array2DTracer = require('./array2d');\nvar ChartTracer = require('./chart');\nvar CoordinateSystemTracer = require('./coordinate_system');\nvar DirectedGraphTracer = require('./directed_graph');\nvar UndirectedGraphTracer = require('./undirected_graph');\nvar WeightedDirectedGraphTracer = require('./weighted_directed_graph');\nvar WeightedUndirectedGraphTracer = require('./weighted_undirected_graph');\n\nmodule.exports = {\n  Tracer: Tracer,\n  LogTracer: LogTracer,\n  Array1DTracer: Array1DTracer,\n  Array2DTracer: Array2DTracer,\n  ChartTracer: ChartTracer,\n  CoordinateSystemTracer: CoordinateSystemTracer,\n  DirectedGraphTracer: DirectedGraphTracer,\n  UndirectedGraphTracer: UndirectedGraphTracer,\n  WeightedDirectedGraphTracer: WeightedDirectedGraphTracer,\n  WeightedUndirectedGraphTracer: WeightedUndirectedGraphTracer\n};\n\n},{\"./array1d\":37,\"./array2d\":38,\"./chart\":39,\"./coordinate_system\":40,\"./directed_graph\":41,\"./log\":43,\"./tracer\":44,\"./undirected_graph\":45,\"./weighted_directed_graph\":46,\"./weighted_undirected_graph\":47}],43:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Tracer = require('./tracer');\n\nvar LogTracer = function (_Tracer) {\n  _inherits(LogTracer, _Tracer);\n\n  _createClass(LogTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'LogTracer';\n    }\n  }]);\n\n  function LogTracer(name) {\n    _classCallCheck(this, LogTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LogTracer).call(this, name));\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(LogTracer, [{\n    key: '_print',\n    value: function _print(msg) {\n      this.manager.pushStep(this.capsule, {\n        type: 'print',\n        msg: msg\n      });\n      return this;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'print':\n          this.print(step.msg);\n          break;\n      }\n    }\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      this.scrollToEnd(Math.min(50, this.interval));\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      _get(Object.getPrototypeOf(LogTracer.prototype), 'clear', this).call(this);\n\n      this.$wrapper.empty();\n    }\n  }, {\n    key: 'print',\n    value: function print(message) {\n      this.$wrapper.append($('<span>').append(message + '<br/>'));\n    }\n  }, {\n    key: 'scrollToEnd',\n    value: function scrollToEnd(duration) {\n      this.$container.animate({\n        scrollTop: this.$container[0].scrollHeight\n      }, duration);\n    }\n  }]);\n\n  return LogTracer;\n}(Tracer);\n\nvar initView = function initView(tracer) {\n  tracer.$wrapper = tracer.capsule.$wrapper = $('<div class=\"wrapper\">');\n  tracer.$container.append(tracer.$wrapper);\n};\n\nmodule.exports = LogTracer;\n\n},{\"./tracer\":44}],44:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar app = require('../../app');\n\nvar _require = require('../../tracer_manager/util/index');\n\nvar toJSON = _require.toJSON;\nvar fromJSON = _require.fromJSON;\n\nvar Tracer = function () {\n  _createClass(Tracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'Tracer';\n    }\n  }]);\n\n  function Tracer(name) {\n    _classCallCheck(this, Tracer);\n\n    this.module = this.constructor;\n\n    this.manager = app.getTracerManager();\n    this.capsule = this.manager.allocate(this);\n    $.extend(this, this.capsule);\n\n    this.setName(name);\n  }\n\n  _createClass(Tracer, [{\n    key: '_setData',\n    value: function _setData() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.manager.pushStep(this.capsule, {\n        type: 'setData',\n        args: toJSON(args)\n      });\n      return this;\n    }\n  }, {\n    key: '_clear',\n    value: function _clear() {\n      this.manager.pushStep(this.capsule, {\n        type: 'clear'\n      });\n      return this;\n    }\n  }, {\n    key: '_wait',\n    value: function _wait() {\n      this.manager.newStep();\n      return this;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      var type = step.type;\n      var args = step.args;\n\n\n      switch (type) {\n        case 'setData':\n          this.setData.apply(this, _toConsumableArray(fromJSON(args)));\n          break;\n        case 'clear':\n          this.clear();\n          break;\n      }\n    }\n  }, {\n    key: 'setName',\n    value: function setName(name) {\n      var $name = void 0;\n      if (this.isNew) {\n        $name = $('<span class=\"name\">');\n        this.$container.append($name);\n      } else {\n        $name = this.$container.find('span.name');\n      }\n      $name.text(name || this.defaultName);\n    }\n  }, {\n    key: 'setData',\n    value: function setData() {\n      var data = toJSON(arguments);\n      if (!this.isNew && this.lastData === data) {\n        return true;\n      }\n      this.lastData = this.capsule.lastData = data;\n      return false;\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {}\n  }, {\n    key: 'refresh',\n    value: function refresh() {}\n  }, {\n    key: 'clear',\n    value: function clear() {}\n  }, {\n    key: 'attach',\n    value: function attach(tracer) {\n      if (tracer.module === LogTracer) {\n        this.logTracer = tracer;\n      }\n      return this;\n    }\n  }, {\n    key: 'mousedown',\n    value: function mousedown(e) {}\n  }, {\n    key: 'mousemove',\n    value: function mousemove(e) {}\n  }, {\n    key: 'mouseup',\n    value: function mouseup(e) {}\n  }, {\n    key: 'mousewheel',\n    value: function mousewheel(e) {}\n  }]);\n\n  return Tracer;\n}();\n\nmodule.exports = Tracer;\n\n},{\"../../app\":3,\"../../tracer_manager/util/index\":62}],45:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DirectedGraphTracer = require('./directed_graph');\n\nvar UndirectedGraphTracer = function (_DirectedGraphTracer) {\n  _inherits(UndirectedGraphTracer, _DirectedGraphTracer);\n\n  _createClass(UndirectedGraphTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'UndirectedGraphTracer';\n    }\n  }]);\n\n  function UndirectedGraphTracer(name) {\n    _classCallCheck(this, UndirectedGraphTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(UndirectedGraphTracer).call(this, name));\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(UndirectedGraphTracer, [{\n    key: 'setData',\n    value: function setData(G) {\n      return _get(Object.getPrototypeOf(UndirectedGraphTracer.prototype), 'setData', this).call(this, G, true);\n    }\n  }, {\n    key: 'e',\n    value: function e(v1, v2) {\n      if (v1 > v2) {\n        var temp = v1;\n        v1 = v2;\n        v2 = temp;\n      }\n      return 'e' + v1 + '_' + v2;\n    }\n  }, {\n    key: 'drawOnHover',\n    value: function drawOnHover(node, context, settings, next) {\n      var tracer = this;\n\n      context.setLineDash([5, 5]);\n      var nodeIdx = node.id.substring(1);\n      this.graph.edges().forEach(function (edge) {\n        var ends = edge.id.substring(1).split(\"_\");\n        if (ends[0] == nodeIdx) {\n          var color = '#0ff';\n          var source = node;\n          var target = tracer.graph.nodes('n' + ends[1]);\n          tracer.drawEdge(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        } else if (ends[1] == nodeIdx) {\n          var color = '#0ff';\n          var source = tracer.graph.nodes('n' + ends[0]);\n          var target = node;\n          tracer.drawEdge(edge, source, target, color, context, settings);\n          if (next) next(edge, source, target, color, context, settings);\n        }\n      });\n    }\n  }, {\n    key: 'drawEdge',\n    value: function drawEdge(edge, source, target, color, context, settings) {\n      var prefix = settings('prefix') || '',\n          size = edge[prefix + 'size'] || 1;\n\n      context.strokeStyle = color;\n      context.lineWidth = size;\n      context.beginPath();\n      context.moveTo(source[prefix + 'x'], source[prefix + 'y']);\n      context.lineTo(target[prefix + 'x'], target[prefix + 'y']);\n      context.stroke();\n    }\n  }]);\n\n  return UndirectedGraphTracer;\n}(DirectedGraphTracer);\n\nvar initView = function initView(tracer) {\n  tracer.s.settings({\n    defaultEdgeType: 'def',\n    funcEdgesDef: function funcEdgesDef(edge, source, target, context, settings) {\n      var color = tracer.getColor(edge, source, target, settings);\n      tracer.drawEdge(edge, source, target, color, context, settings);\n    }\n  });\n};\n\nmodule.exports = UndirectedGraphTracer;\n\n},{\"./directed_graph\":41}],46:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DirectedGraphTracer = require('./directed_graph');\n\nvar _require = require('../../tracer_manager/util/index');\n\nvar refineByType = _require.refineByType;\n\nvar WeightedDirectedGraphTracer = function (_DirectedGraphTracer) {\n  _inherits(WeightedDirectedGraphTracer, _DirectedGraphTracer);\n\n  _createClass(WeightedDirectedGraphTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'WeightedDirectedGraphTracer';\n    }\n  }]);\n\n  function WeightedDirectedGraphTracer(name) {\n    _classCallCheck(this, WeightedDirectedGraphTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeightedDirectedGraphTracer).call(this, name));\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(WeightedDirectedGraphTracer, [{\n    key: '_weight',\n    value: function _weight(target, weight) {\n      this.manager.pushStep(this.capsule, {\n        type: 'weight',\n        target: target,\n        weight: weight\n      });\n      return this;\n    }\n  }, {\n    key: '_visit',\n    value: function _visit(target, source, weight) {\n      this.manager.pushStep(this.capsule, {\n        type: 'visit',\n        target: target,\n        source: source,\n        weight: weight\n      });\n      return this;\n    }\n  }, {\n    key: '_leave',\n    value: function _leave(target, source, weight) {\n      this.manager.pushStep(this.capsule, {\n        type: 'leave',\n        target: target,\n        source: source,\n        weight: weight\n      });\n      return this;\n    }\n  }, {\n    key: 'processStep',\n    value: function processStep(step, options) {\n      switch (step.type) {\n        case 'weight':\n          var targetNode = this.graph.nodes(this.n(step.target));\n          if (step.weight !== undefined) targetNode.weight = refineByType(step.weight);\n          break;\n        case 'visit':\n        case 'leave':\n          var visit = step.type == 'visit';\n          var targetNode = this.graph.nodes(this.n(step.target));\n          var color = visit ? this.color.visited : this.color.left;\n          targetNode.color = color;\n          if (step.weight !== undefined) targetNode.weight = refineByType(step.weight);\n          if (step.source !== undefined) {\n            var edgeId = this.e(step.source, step.target);\n            var edge = this.graph.edges(edgeId);\n            edge.color = color;\n            this.graph.dropEdge(edgeId).addEdge(edge);\n          }\n          if (this.logTracer) {\n            var source = step.source;\n            if (source === undefined) source = '';\n            this.logTracer.print(visit ? source + ' -> ' + step.target : source + ' <- ' + step.target);\n          }\n          break;\n        default:\n          _get(Object.getPrototypeOf(WeightedDirectedGraphTracer.prototype), 'processStep', this).call(this, step, options);\n      }\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      _get(Object.getPrototypeOf(WeightedDirectedGraphTracer.prototype), 'clear', this).call(this);\n\n      this.clearWeights();\n    }\n  }, {\n    key: 'clearWeights',\n    value: function clearWeights() {\n      this.graph.nodes().forEach(function (node) {\n        node.weight = 0;\n      });\n    }\n  }, {\n    key: 'drawEdgeWeight',\n    value: function drawEdgeWeight(edge, source, target, color, context, settings) {\n      if (source == target) return;\n\n      var prefix = settings('prefix') || '',\n          size = edge[prefix + 'size'] || 1;\n\n      if (size < settings('edgeLabelThreshold')) return;\n\n      if (0 === settings('edgeLabelSizePowRatio')) throw '\"edgeLabelSizePowRatio\" must not be 0.';\n\n      var fontSize,\n          x = (source[prefix + 'x'] + target[prefix + 'x']) / 2,\n          y = (source[prefix + 'y'] + target[prefix + 'y']) / 2,\n          dX = target[prefix + 'x'] - source[prefix + 'x'],\n          dY = target[prefix + 'y'] - source[prefix + 'y'],\n          angle = Math.atan2(dY, dX);\n\n      fontSize = settings('edgeLabelSize') === 'fixed' ? settings('defaultEdgeLabelSize') : settings('defaultEdgeLabelSize') * size * Math.pow(size, -1 / settings('edgeLabelSizePowRatio'));\n\n      context.save();\n\n      if (edge.active) {\n        context.font = [settings('activeFontStyle'), fontSize + 'px', settings('activeFont') || settings('font')].join(' ');\n\n        context.fillStyle = color;\n      } else {\n        context.font = [settings('fontStyle'), fontSize + 'px', settings('font')].join(' ');\n\n        context.fillStyle = color;\n      }\n\n      context.textAlign = 'center';\n      context.textBaseline = 'alphabetic';\n\n      context.translate(x, y);\n      context.rotate(angle);\n      context.fillText(edge.weight, 0, -size / 2 - 3);\n\n      context.restore();\n    }\n  }, {\n    key: 'drawNodeWeight',\n    value: function drawNodeWeight(node, context, settings) {\n      var fontSize,\n          prefix = settings('prefix') || '',\n          size = node[prefix + 'size'];\n\n      if (size < settings('labelThreshold')) return;\n\n      fontSize = settings('labelSize') === 'fixed' ? settings('defaultLabelSize') : settings('labelSizeRatio') * size;\n\n      context.font = (settings('fontStyle') ? settings('fontStyle') + ' ' : '') + fontSize + 'px ' + settings('font');\n      context.fillStyle = settings('labelColor') === 'node' ? node.color || settings('defaultNodeColor') : settings('defaultLabelColor');\n\n      context.textAlign = 'left';\n      context.fillText(node.weight, Math.round(node[prefix + 'x'] + size * 1.5), Math.round(node[prefix + 'y'] + fontSize / 3));\n    }\n  }]);\n\n  return WeightedDirectedGraphTracer;\n}(DirectedGraphTracer);\n\nvar initView = function initView(tracer) {\n  tracer.s.settings({\n    edgeLabelSize: 'proportional',\n    defaultEdgeLabelSize: 20,\n    edgeLabelSizePowRatio: 0.8,\n    funcLabelsDef: function funcLabelsDef(node, context, settings) {\n      tracer.drawNodeWeight(node, context, settings);\n      tracer.drawLabel(node, context, settings);\n    },\n    funcHoversDef: function funcHoversDef(node, context, settings) {\n      tracer.drawOnHover(node, context, settings, tracer.drawEdgeWeight);\n    },\n    funcEdgesArrow: function funcEdgesArrow(edge, source, target, context, settings) {\n      var color = tracer.getColor(edge, source, target, settings);\n      tracer.drawArrow(edge, source, target, color, context, settings);\n      tracer.drawEdgeWeight(edge, source, target, color, context, settings);\n    }\n  });\n};\n\nmodule.exports = WeightedDirectedGraphTracer;\n\n},{\"../../tracer_manager/util/index\":62,\"./directed_graph\":41}],47:[function(require,module,exports){\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar WeightedDirectedGraphTracer = require('./weighted_directed_graph');\nvar UndirectedGraphTracer = require('./undirected_graph');\n\nvar WeightedUndirectedGraphTracer = function (_WeightedDirectedGrap) {\n  _inherits(WeightedUndirectedGraphTracer, _WeightedDirectedGrap);\n\n  _createClass(WeightedUndirectedGraphTracer, null, [{\n    key: 'getClassName',\n    value: function getClassName() {\n      return 'WeightedUndirectedGraphTracer';\n    }\n  }]);\n\n  function WeightedUndirectedGraphTracer(name) {\n    _classCallCheck(this, WeightedUndirectedGraphTracer);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeightedUndirectedGraphTracer).call(this, name));\n\n    _this.e = UndirectedGraphTracer.prototype.e;\n    _this.drawOnHover = UndirectedGraphTracer.prototype.drawOnHover;\n    _this.drawEdge = UndirectedGraphTracer.prototype.drawEdge;\n\n    if (_this.isNew) initView(_this);\n    return _this;\n  }\n\n  _createClass(WeightedUndirectedGraphTracer, [{\n    key: 'setData',\n    value: function setData(G) {\n      return _get(Object.getPrototypeOf(WeightedUndirectedGraphTracer.prototype), 'setData', this).call(this, G, true);\n    }\n  }, {\n    key: 'drawEdgeWeight',\n    value: function drawEdgeWeight(edge, source, target, color, context, settings) {\n      var prefix = settings('prefix') || '';\n      if (source[prefix + 'x'] > target[prefix + 'x']) {\n        var temp = source;\n        source = target;\n        target = temp;\n      }\n      WeightedDirectedGraphTracer.prototype.drawEdgeWeight.call(this, edge, source, target, color, context, settings);\n    }\n  }]);\n\n  return WeightedUndirectedGraphTracer;\n}(WeightedDirectedGraphTracer);\n\nvar initView = function initView(tracer) {\n  tracer.s.settings({\n    defaultEdgeType: 'def',\n    funcEdgesDef: function funcEdgesDef(edge, source, target, context, settings) {\n      var color = tracer.getColor(edge, source, target, settings);\n      tracer.drawEdge(edge, source, target, color, context, settings);\n      tracer.drawEdgeWeight(edge, source, target, color, context, settings);\n    }\n  });\n};\n\nmodule.exports = WeightedUndirectedGraphTracer;\n\n},{\"./undirected_graph\":45,\"./weighted_directed_graph\":46}],48:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n\n  return request(url, {\n    type: 'GET'\n  });\n};\n\n},{\"./request\":51}],49:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url) {\n  return request(url, {\n    dataType: 'json',\n    type: 'GET'\n  });\n};\n\n},{\"./request\":51}],50:[function(require,module,exports){\n'use strict';\n\nvar request = require('./request');\n\nmodule.exports = function (url, data) {\n  return request(url, {\n    dataType: 'json',\n    type: 'POST',\n    data: JSON.stringify(data)\n  });\n};\n\n},{\"./request\":51}],51:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar app = require('../../app');\n\nvar _$ = $;\nvar ajax = _$.ajax;\nvar extend = _$.extend;\n\n\nvar defaults = {};\n\nmodule.exports = function (url) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  app.setIsLoading(true);\n\n  return new RSVP.Promise(function (resolve, reject) {\n    var callbacks = {\n      success: function success(response) {\n        app.setIsLoading(false);\n        resolve(response);\n      },\n      error: function error(reason) {\n        app.setIsLoading(false);\n        reject(reason);\n      }\n    };\n\n    var opts = extend({}, defaults, options, callbacks, {\n      url: url\n    });\n\n    ajax(opts);\n  });\n};\n\n},{\"../../app\":3,\"rsvp\":67}],52:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar app = require('../app');\nvar Toast = require('../dom/toast');\n\nvar checkLoading = function checkLoading() {\n  if (app.getIsLoading()) {\n    Toast.showErrorToast('Wait until it completes loading of previous file.');\n    return true;\n  }\n  return false;\n};\n\nvar getParameterByName = function getParameterByName(name) {\n  var url = window.location.href;\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');\n\n  var results = regex.exec(url);\n\n  if (!results || results.length !== 3) {\n    return null;\n  }\n\n  var _results = _slicedToArray(results, 3);\n\n  var id = _results[2];\n\n\n  return id;\n};\n\nvar getHashValue = function getHashValue(key) {\n  if (!key) return null;\n  var hash = window.location.hash.substr(1);\n  var params = hash ? hash.split('&') : [];\n  for (var i = 0; i < params.length; i++) {\n    var pair = params[i].split('=');\n    if (pair[0] === key) {\n      return pair[1];\n    }\n  }\n  return null;\n};\n\nvar setHashValue = function setHashValue(key, value) {\n  if (!key || !value) return;\n  var hash = window.location.hash.substr(1);\n  var params = hash ? hash.split('&') : [];\n\n  var found = false;\n  for (var i = 0; i < params.length && !found; i++) {\n    var pair = params[i].split('=');\n    if (pair[0] === key) {\n      pair[1] = value;\n      params[i] = pair.join('=');\n      found = true;\n    }\n  }\n  if (!found) {\n    params.push([key, value].join('='));\n  }\n\n  var newHash = params.join('&');\n  window.location.hash = '#' + newHash;\n};\n\nvar removeHashValue = function removeHashValue(key) {\n  if (!key) return;\n  var hash = window.location.hash.substr(1);\n  var params = hash ? hash.split('&') : [];\n\n  for (var i = 0; i < params.length; i++) {\n    var pair = params[i].split('=');\n    if (pair[0] === key) {\n      params.splice(i, 1);\n      break;\n    }\n  }\n\n  var newHash = params.join('&');\n  window.location.hash = '#' + newHash;\n};\n\nvar setPath = function setPath(category, algorithm, file) {\n  var path = category ? category + (algorithm ? '/' + algorithm + (file ? '/' + file : '') : '') : '';\n  setHashValue('path', path);\n};\n\nvar getPath = function getPath() {\n  var hash = getHashValue('path');\n  if (hash) {\n    var _hash$split = hash.split('/');\n\n    var _hash$split2 = _slicedToArray(_hash$split, 3);\n\n    var category = _hash$split2[0];\n    var algorithm = _hash$split2[1];\n    var file = _hash$split2[2];\n\n    return { category: category, algorithm: algorithm, file: file };\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = {\n  checkLoading: checkLoading,\n  getParameterByName: getParameterByName,\n  getHashValue: getHashValue,\n  setHashValue: setHashValue,\n  removeHashValue: removeHashValue,\n  setPath: setPath,\n  getPath: getPath\n};\n\n},{\"../app\":3,\"../dom/toast\":23}],53:[function(require,module,exports){\n'use strict';\n\nvar loadAlgorithm = require('./load_algorithm');\nvar loadCategories = require('./load_categories');\nvar loadFile = require('./load_file');\nvar loadScratchPaper = require('./load_scratch_paper');\nvar shareScratchPaper = require('./share_scratch_paper');\n\nmodule.exports = {\n  loadAlgorithm: loadAlgorithm,\n  loadCategories: loadCategories,\n  loadFile: loadFile,\n  loadScratchPaper: loadScratchPaper,\n  shareScratchPaper: shareScratchPaper\n};\n\n},{\"./load_algorithm\":54,\"./load_categories\":55,\"./load_file\":56,\"./load_scratch_paper\":57,\"./share_scratch_paper\":58}],54:[function(require,module,exports){\n'use strict';\n\nvar getJSON = require('./ajax/get_json');\n\nvar _require = require('../utils');\n\nvar getAlgorithmDir = _require.getAlgorithmDir;\n\n\nmodule.exports = function (category, algorithm) {\n  var dir = getAlgorithmDir(category, algorithm);\n  return getJSON(dir + 'desc.json');\n};\n\n},{\"../utils\":65,\"./ajax/get_json\":49}],55:[function(require,module,exports){\n'use strict';\n\nvar getJSON = require('./ajax/get_json');\n\nmodule.exports = function () {\n  return getJSON('./algorithm/category.json');\n};\n\n},{\"./ajax/get_json\":49}],56:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\n\nvar app = require('../app');\n\nvar _require = require('../utils');\n\nvar getFileDir = _require.getFileDir;\nvar isScratchPaper = _require.isScratchPaper;\n\nvar _require2 = require('./helpers');\n\nvar checkLoading = _require2.checkLoading;\nvar setPath = _require2.setPath;\n\n\nvar get = require('./ajax/get');\n\nvar loadDataAndCode = function loadDataAndCode(dir) {\n  return RSVP.hash({\n    data: get(dir + 'data.js'),\n    code: get(dir + 'code.js')\n  });\n};\n\nvar loadFileAndUpdateContent = function loadFileAndUpdateContent(dir) {\n  app.getEditor().clearContent();\n\n  return loadDataAndCode(dir).then(function (content) {\n    app.updateCachedFile(dir, content);\n    app.getEditor().setContent(content);\n  });\n};\n\nvar cachedContentExists = function cachedContentExists(cachedFile) {\n  return cachedFile && cachedFile.data !== undefined && cachedFile.code !== undefined;\n};\n\nmodule.exports = function (category, algorithm, file, explanation) {\n  return new RSVP.Promise(function (resolve, reject) {\n    if (checkLoading()) {\n      reject();\n    } else {\n      if (isScratchPaper(category)) {\n        setPath(category, app.getLoadedScratch());\n      } else {\n        setPath(category, algorithm, file);\n      }\n      $('#explanation').html(explanation);\n\n      var dir = getFileDir(category, algorithm, file);\n      app.setLastFileUsed(dir);\n      var cachedFile = app.getCachedFile(dir);\n\n      if (cachedContentExists(cachedFile)) {\n        app.getEditor().setContent(cachedFile);\n        resolve();\n      } else {\n        loadFileAndUpdateContent(dir).then(resolve, reject);\n      }\n    }\n  });\n};\n\n},{\"../app\":3,\"../utils\":65,\"./ajax/get\":48,\"./helpers\":52,\"rsvp\":67}],57:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar app = require('../app');\n\nvar _require = require('../utils');\n\nvar getFileDir = _require.getFileDir;\n\n\nvar getJSON = require('./ajax/get_json');\nvar loadAlgorithm = require('./load_algorithm');\n\nvar extractGistCode = function extractGistCode(files, name) {\n  return files[name + '.js'].content;\n};\n\nmodule.exports = function (gistID) {\n  return new RSVP.Promise(function (resolve, reject) {\n    app.setLoadedScratch(gistID);\n\n    getJSON('https://api.github.com/gists/' + gistID).then(function (_ref) {\n      var files = _ref.files;\n\n\n      var category = 'scratch';\n      var algorithm = gistID;\n\n      loadAlgorithm(category, algorithm).then(function (data) {\n\n        var algoData = extractGistCode(files, 'data');\n        var algoCode = extractGistCode(files, 'code');\n\n        // update scratch paper algo code with the loaded gist code\n        var dir = getFileDir(category, algorithm, 'scratch_paper');\n        app.updateCachedFile(dir, {\n          data: algoData,\n          code: algoCode,\n          'CREDIT.md': 'Shared by an anonymous user from http://parkjs814.github.io/AlgorithmVisualizer'\n        });\n\n        resolve({\n          category: category,\n          algorithm: algorithm,\n          data: data\n        });\n      });\n    });\n  });\n};\n\n},{\"../app\":3,\"../utils\":65,\"./ajax/get_json\":49,\"./load_algorithm\":54,\"rsvp\":67}],58:[function(require,module,exports){\n'use strict';\n\nvar RSVP = require('rsvp');\nvar app = require('../app');\n\nvar postJSON = require('./ajax/post_json');\n\nvar _require = require('./helpers');\n\nvar setPath = _require.setPath;\n\n\nmodule.exports = function () {\n  return new RSVP.Promise(function (resolve, reject) {\n    var _app$getEditor = app.getEditor();\n\n    var dataEditor = _app$getEditor.dataEditor;\n    var codeEditor = _app$getEditor.codeEditor;\n\n\n    var gist = {\n      'description': 'temp',\n      'public': true,\n      'files': {\n        'data.js': {\n          'content': dataEditor.getValue()\n        },\n        'code.js': {\n          'content': codeEditor.getValue()\n        }\n      }\n    };\n\n    postJSON('https://api.github.com/gists', gist).then(function (_ref) {\n      var id = _ref.id;\n\n      app.setLoadedScratch(id);\n      setPath('scratch', id);\n      var _location = location;\n      var href = _location.href;\n\n      $('#algorithm').html('Shared');\n      resolve(href);\n    });\n  });\n};\n\n},{\"../app\":3,\"./ajax/post_json\":50,\"./helpers\":52,\"rsvp\":67}],59:[function(require,module,exports){\n'use strict';\n\nvar TracerManager = require('./manager');\nvar Tracer = require('../module/tracer/tracer');\n\nmodule.exports = {\n  init: function init() {\n    var tm = new TracerManager();\n    Tracer.prototype.manager = tm;\n    return tm;\n  }\n};\n\n},{\"../module/tracer/tracer\":44,\"./manager\":60}],60:[function(require,module,exports){\n'use strict';\n\nvar stepLimit = 1e6;\n\nvar TracerManager = function TracerManager() {\n  this.timer = null;\n  this.pause = false;\n  this.capsules = [];\n  this.interval = 500;\n};\n\nTracerManager.prototype = {\n  add: function add(tracer) {\n\n    var $container = $('<section class=\"module_wrapper\">');\n    $('.module_container').append($container);\n\n    var capsule = {\n      module: tracer.module,\n      tracer: tracer,\n      allocated: true,\n      defaultName: null,\n      $container: $container,\n      isNew: true\n    };\n\n    this.capsules.push(capsule);\n    return capsule;\n  },\n  allocate: function allocate(newTracer) {\n    var selectedCapsule = null;\n    var count = 0;\n\n    $.each(this.capsules, function (i, capsule) {\n      if (capsule.module === newTracer.module) {\n        count++;\n        if (!capsule.allocated) {\n          capsule.tracer = newTracer;\n          capsule.allocated = true;\n          capsule.isNew = false;\n          selectedCapsule = capsule;\n          return false;\n        }\n      }\n    });\n\n    if (selectedCapsule === null) {\n      count++;\n      selectedCapsule = this.add(newTracer);\n    }\n\n    var className = newTracer.module.getClassName();\n    selectedCapsule.defaultName = className + ' ' + count;\n    selectedCapsule.order = this.order++;\n    return selectedCapsule;\n  },\n  deallocateAll: function deallocateAll() {\n    this.order = 0;\n    this.reset();\n    $.each(this.capsules, function (i, capsule) {\n      capsule.allocated = false;\n    });\n  },\n  removeUnallocated: function removeUnallocated() {\n    var changed = false;\n\n    this.capsules = $.grep(this.capsules, function (capsule) {\n      var removed = !capsule.allocated;\n\n      if (capsule.isNew || removed) {\n        changed = true;\n      }\n      if (removed) {\n        capsule.$container.remove();\n      }\n\n      return !removed;\n    });\n\n    if (changed) {\n      this.place();\n    }\n  },\n  place: function place() {\n    var capsules = this.capsules;\n\n\n    $.each(capsules, function (i, capsule) {\n      var width = 100;\n      var height = 100 / capsules.length;\n      var top = height * capsule.order;\n\n      capsule.$container.css({\n        top: top + '%',\n        width: width + '%',\n        height: height + '%'\n      });\n\n      capsule.tracer.resize();\n    });\n  },\n  resize: function resize() {\n    this.command('resize');\n  },\n  isPause: function isPause() {\n    return this.pause;\n  },\n  setInterval: function setInterval(interval) {\n    $('#interval').val(interval);\n  },\n  reset: function reset() {\n    this.traces = [];\n    this.traceIndex = -1;\n    this.stepCnt = 0;\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    this.command('clear');\n  },\n  pushStep: function pushStep(capsule, step) {\n    if (this.stepCnt++ > stepLimit) throw \"Tracer's stack overflow\";\n    var len = this.traces.length;\n    var last = [];\n    if (len === 0) {\n      this.traces.push(last);\n    } else {\n      last = this.traces[len - 1];\n    }\n    last.push($.extend(step, {\n      capsule: capsule\n    }));\n  },\n  newStep: function newStep() {\n    this.traces.push([]);\n  },\n  pauseStep: function pauseStep() {\n    if (this.traceIndex < 0) return;\n    this.pause = true;\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    $('#btn_pause').addClass('active');\n  },\n  resumeStep: function resumeStep() {\n    this.pause = false;\n    this.step(this.traceIndex + 1);\n    $('#btn_pause').removeClass('active');\n  },\n  step: function step(i) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var tracer = this;\n\n    if (isNaN(i) || i >= this.traces.length || i < 0) return;\n\n    this.traceIndex = i;\n    var trace = this.traces[i];\n    trace.forEach(function (step) {\n      step.capsule.tracer.processStep(step, options);\n    });\n\n    if (!options.virtual) {\n      this.command('refresh');\n    }\n\n    if (this.pause) return;\n\n    this.timer = setTimeout(function () {\n      tracer.step(i + 1, options);\n    }, this.interval);\n  },\n  prevStep: function prevStep() {\n    this.command('clear');\n\n    var finalIndex = this.traceIndex - 1;\n    if (finalIndex < 0) {\n      this.traceIndex = -1;\n      this.command('refresh');\n      return;\n    }\n\n    for (var i = 0; i < finalIndex; i++) {\n      this.step(i, {\n        virtual: true\n      });\n    }\n\n    this.step(finalIndex);\n  },\n  nextStep: function nextStep() {\n    this.step(this.traceIndex + 1);\n  },\n  visualize: function visualize() {\n    this.traceIndex = -1;\n    this.resumeStep();\n  },\n  command: function command() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var functionName = args.shift();\n    $.each(this.capsules, function (i, capsule) {\n      if (capsule.allocated) {\n        capsule.tracer.module.prototype[functionName].apply(capsule.tracer, args);\n      }\n    });\n  },\n  findOwner: function findOwner(container) {\n    var selectedCapsule = null;\n    $.each(this.capsules, function (i, capsule) {\n      if (capsule.$container[0] === container) {\n        selectedCapsule = capsule;\n        return false;\n      }\n    });\n    return selectedCapsule.tracer;\n  }\n};\n\nmodule.exports = TracerManager;\n\n},{}],61:[function(require,module,exports){\n'use strict';\n\nvar parse = JSON.parse;\n\n\nvar fromJSON = function fromJSON(obj) {\n  return parse(obj, function (key, value) {\n    return value === 'Infinity' ? Infinity : value;\n  });\n};\n\nmodule.exports = fromJSON;\n\n},{}],62:[function(require,module,exports){\n'use strict';\n\nvar toJSON = require('./to_json');\nvar fromJSON = require('./from_json');\nvar refineByType = require('./refine_by_type');\n\nmodule.exports = {\n  toJSON: toJSON,\n  fromJSON: fromJSON,\n  refineByType: refineByType\n};\n\n},{\"./from_json\":61,\"./refine_by_type\":63,\"./to_json\":64}],63:[function(require,module,exports){\n'use strict';\n\nvar refineByType = function refineByType(item) {\n  return typeof item === 'number' ? refineNumber(item) : refineString(item);\n};\n\nvar refineString = function refineString(str) {\n  return str === '' ? ' ' : str;\n};\n\nvar refineNumber = function refineNumber(num) {\n  return num === Infinity ? '∞' : num;\n};\n\nmodule.exports = refineByType;\n\n},{}],64:[function(require,module,exports){\n'use strict';\n\nvar stringify = JSON.stringify;\n\n\nvar toJSON = function toJSON(obj) {\n  return stringify(obj, function (key, value) {\n    return value === Infinity ? 'Infinity' : value;\n  });\n};\n\nmodule.exports = toJSON;\n\n},{}],65:[function(require,module,exports){\n'use strict';\n\nvar isScratchPaper = function isScratchPaper(category, algorithm) {\n  return category == 'scratch';\n};\n\nvar getAlgorithmDir = function getAlgorithmDir(category, algorithm) {\n  if (isScratchPaper(category)) return './algorithm/scratch_paper/';\n  return './algorithm/' + category + '/' + algorithm + '/';\n};\n\nvar getFileDir = function getFileDir(category, algorithm, file) {\n  if (isScratchPaper(category)) return './algorithm/scratch_paper/';\n  return './algorithm/' + category + '/' + algorithm + '/' + file + '/';\n};\n\nmodule.exports = {\n  isScratchPaper: isScratchPaper,\n  getAlgorithmDir: getAlgorithmDir,\n  getFileDir: getFileDir\n};\n\n},{}],66:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],67:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.2.1\n */\n\n(function() {\n    \"use strict\";\n    function lib$rsvp$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$rsvp$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$rsvp$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$rsvp$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$rsvp$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$rsvp$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$rsvp$utils$$isArray = lib$rsvp$utils$$_isArray;\n\n    var lib$rsvp$utils$$now = Date.now || function() { return new Date().getTime(); };\n\n    function lib$rsvp$utils$$F() { }\n\n    var lib$rsvp$utils$$o_create = (Object.create || function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (typeof o !== 'object') {\n        throw new TypeError('Argument must be an object');\n      }\n      lib$rsvp$utils$$F.prototype = o;\n      return new lib$rsvp$utils$$F();\n    });\n    function lib$rsvp$events$$indexOf(callbacks, callback) {\n      for (var i=0, l=callbacks.length; i<l; i++) {\n        if (callbacks[i] === callback) { return i; }\n      }\n\n      return -1;\n    }\n\n    function lib$rsvp$events$$callbacksFor(object) {\n      var callbacks = object._promiseCallbacks;\n\n      if (!callbacks) {\n        callbacks = object._promiseCallbacks = {};\n      }\n\n      return callbacks;\n    }\n\n    var lib$rsvp$events$$default = {\n\n      /**\n        `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n        Example:\n\n        ```javascript\n        var object = {};\n\n        RSVP.EventTarget.mixin(object);\n\n        object.on('finished', function(event) {\n          // handle event\n        });\n\n        object.trigger('finished', { detail: value });\n        ```\n\n        `EventTarget.mixin` also works with prototypes:\n\n        ```javascript\n        var Person = function() {};\n        RSVP.EventTarget.mixin(Person.prototype);\n\n        var yehuda = new Person();\n        var tom = new Person();\n\n        yehuda.on('poke', function(event) {\n          console.log('Yehuda says OW');\n        });\n\n        tom.on('poke', function(event) {\n          console.log('Tom says OW');\n        });\n\n        yehuda.trigger('poke');\n        tom.trigger('poke');\n        ```\n\n        @method mixin\n        @for RSVP.EventTarget\n        @private\n        @param {Object} object object to extend with EventTarget methods\n      */\n      'mixin': function(object) {\n        object['on']      = this['on'];\n        object['off']     = this['off'];\n        object['trigger'] = this['trigger'];\n        object._promiseCallbacks = undefined;\n        return object;\n      },\n\n      /**\n        Registers a callback to be executed when `eventName` is triggered\n\n        ```javascript\n        object.on('event', function(eventInfo){\n          // handle the event\n        });\n\n        object.trigger('event');\n        ```\n\n        @method on\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to listen for\n        @param {Function} callback function to be called when the event is triggered.\n      */\n      'on': function(eventName, callback) {\n        if (typeof callback !== 'function') {\n          throw new TypeError('Callback must be a function');\n        }\n\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks;\n\n        callbacks = allCallbacks[eventName];\n\n        if (!callbacks) {\n          callbacks = allCallbacks[eventName] = [];\n        }\n\n        if (lib$rsvp$events$$indexOf(callbacks, callback) === -1) {\n          callbacks.push(callback);\n        }\n      },\n\n      /**\n        You can use `off` to stop firing a particular callback for an event:\n\n        ```javascript\n        function doStuff() { // do stuff! }\n        object.on('stuff', doStuff);\n\n        object.trigger('stuff'); // doStuff will be called\n\n        // Unregister ONLY the doStuff callback\n        object.off('stuff', doStuff);\n        object.trigger('stuff'); // doStuff will NOT be called\n        ```\n\n        If you don't pass a `callback` argument to `off`, ALL callbacks for the\n        event will not be executed when the event fires. For example:\n\n        ```javascript\n        var callback1 = function(){};\n        var callback2 = function(){};\n\n        object.on('stuff', callback1);\n        object.on('stuff', callback2);\n\n        object.trigger('stuff'); // callback1 and callback2 will be executed.\n\n        object.off('stuff');\n        object.trigger('stuff'); // callback1 and callback2 will not be executed!\n        ```\n\n        @method off\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName event to stop listening to\n        @param {Function} callback optional argument. If given, only the function\n        given will be removed from the event's callback queue. If no `callback`\n        argument is given, all callbacks will be removed from the event's callback\n        queue.\n      */\n      'off': function(eventName, callback) {\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks, index;\n\n        if (!callback) {\n          allCallbacks[eventName] = [];\n          return;\n        }\n\n        callbacks = allCallbacks[eventName];\n\n        index = lib$rsvp$events$$indexOf(callbacks, callback);\n\n        if (index !== -1) { callbacks.splice(index, 1); }\n      },\n\n      /**\n        Use `trigger` to fire custom events. For example:\n\n        ```javascript\n        object.on('foo', function(){\n          console.log('foo event happened!');\n        });\n        object.trigger('foo');\n        // 'foo event happened!' logged to the console\n        ```\n\n        You can also pass a value as a second argument to `trigger` that will be\n        passed as an argument to all event listeners for the event:\n\n        ```javascript\n        object.on('foo', function(value){\n          console.log(value.name);\n        });\n\n        object.trigger('foo', { name: 'bar' });\n        // 'bar' logged to the console\n        ```\n\n        @method trigger\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to be triggered\n        @param {*} options optional value to be passed to any event handlers for\n        the given `eventName`\n      */\n      'trigger': function(eventName, options, label) {\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks, callback;\n\n        if (callbacks = allCallbacks[eventName]) {\n          // Don't cache the callbacks.length since it may grow\n          for (var i=0; i<callbacks.length; i++) {\n            callback = callbacks[i];\n\n            callback(options, label);\n          }\n        }\n      }\n    };\n\n    var lib$rsvp$config$$config = {\n      instrument: false\n    };\n\n    lib$rsvp$events$$default['mixin'](lib$rsvp$config$$config);\n\n    function lib$rsvp$config$$configure(name, value) {\n      if (name === 'onerror') {\n        // handle for legacy users that expect the actual\n        // error to be passed to their function added via\n        // `RSVP.configure('onerror', someFunctionHere);`\n        lib$rsvp$config$$config['on']('error', value);\n        return;\n      }\n\n      if (arguments.length === 2) {\n        lib$rsvp$config$$config[name] = value;\n      } else {\n        return lib$rsvp$config$$config[name];\n      }\n    }\n\n    var lib$rsvp$instrument$$queue = [];\n\n    function lib$rsvp$instrument$$scheduleFlush() {\n      setTimeout(function() {\n        var entry;\n        for (var i = 0; i < lib$rsvp$instrument$$queue.length; i++) {\n          entry = lib$rsvp$instrument$$queue[i];\n\n          var payload = entry.payload;\n\n          payload.guid = payload.key + payload.id;\n          payload.childGuid = payload.key + payload.childId;\n          if (payload.error) {\n            payload.stack = payload.error.stack;\n          }\n\n          lib$rsvp$config$$config['trigger'](entry.name, entry.payload);\n        }\n        lib$rsvp$instrument$$queue.length = 0;\n      }, 50);\n    }\n\n    function lib$rsvp$instrument$$instrument(eventName, promise, child) {\n      if (1 === lib$rsvp$instrument$$queue.push({\n        name: eventName,\n        payload: {\n          key: promise._guidKey,\n          id:  promise._id,\n          eventName: eventName,\n          detail: promise._result,\n          childId: child && child._id,\n          label: promise._label,\n          timeStamp: lib$rsvp$utils$$now(),\n          error: lib$rsvp$config$$config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n        }})) {\n          lib$rsvp$instrument$$scheduleFlush();\n        }\n      }\n    var lib$rsvp$instrument$$default = lib$rsvp$instrument$$instrument;\n    function lib$rsvp$then$$then(onFulfillment, onRejection, label) {\n      var parent = this;\n      var state = parent._state;\n\n      if (state === lib$rsvp$$internal$$FULFILLED && !onFulfillment || state === lib$rsvp$$internal$$REJECTED && !onRejection) {\n        lib$rsvp$config$$config.instrument && lib$rsvp$instrument$$default('chained', parent, parent);\n        return parent;\n      }\n\n      parent._onError = null;\n\n      var child = new parent.constructor(lib$rsvp$$internal$$noop, label);\n      var result = parent._result;\n\n      lib$rsvp$config$$config.instrument && lib$rsvp$instrument$$default('chained', parent, child);\n\n      if (state) {\n        var callback = arguments[state - 1];\n        lib$rsvp$config$$config.async(function(){\n          lib$rsvp$$internal$$invokeCallback(state, child, callback, result);\n        });\n      } else {\n        lib$rsvp$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n      }\n\n      return child;\n    }\n    var lib$rsvp$then$$default = lib$rsvp$then$$then;\n    function lib$rsvp$promise$resolve$$resolve(object, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      lib$rsvp$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$rsvp$promise$resolve$$default = lib$rsvp$promise$resolve$$resolve;\n    function lib$rsvp$enumerator$$makeSettledResult(state, position, value) {\n      if (state === lib$rsvp$$internal$$FULFILLED) {\n        return {\n          state: 'fulfilled',\n          value: value\n        };\n      } else {\n         return {\n          state: 'rejected',\n          reason: value\n        };\n      }\n    }\n\n    function lib$rsvp$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {\n      this._instanceConstructor = Constructor;\n      this.promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      this._abortOnReject = abortOnReject;\n\n      if (this._validateInput(input)) {\n        this._input     = input;\n        this.length     = input.length;\n        this._remaining = input.length;\n\n        this._init();\n\n        if (this.length === 0) {\n          lib$rsvp$$internal$$fulfill(this.promise, this._result);\n        } else {\n          this.length = this.length || 0;\n          this._enumerate();\n          if (this._remaining === 0) {\n            lib$rsvp$$internal$$fulfill(this.promise, this._result);\n          }\n        }\n      } else {\n        lib$rsvp$$internal$$reject(this.promise, this._validationError());\n      }\n    }\n\n    var lib$rsvp$enumerator$$default = lib$rsvp$enumerator$$Enumerator;\n\n    lib$rsvp$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$rsvp$utils$$isArray(input);\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._enumerate = function() {\n      var length     = this.length;\n      var promise    = this.promise;\n      var input      = this._input;\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        this._eachEntry(input[i], i);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._settleMaybeThenable = function(entry, i) {\n      var c = this._instanceConstructor;\n      var resolve = c.resolve;\n\n      if (resolve === lib$rsvp$promise$resolve$$default) {\n        var then = lib$rsvp$$internal$$getThen(entry);\n\n        if (then === lib$rsvp$then$$default &&\n            entry._state !== lib$rsvp$$internal$$PENDING) {\n          entry._onError = null;\n          this._settledAt(entry._state, i, entry._result);\n        } else if (typeof then !== 'function') {\n          this._remaining--;\n          this._result[i] = this._makeResult(lib$rsvp$$internal$$FULFILLED, i, entry);\n        } else if (c === lib$rsvp$promise$$default) {\n          var promise = new c(lib$rsvp$$internal$$noop);\n          lib$rsvp$$internal$$handleMaybeThenable(promise, entry, then);\n          this._willSettleAt(promise, i);\n        } else {\n          this._willSettleAt(new c(function(resolve) { resolve(entry); }), i);\n        }\n      } else {\n        this._willSettleAt(resolve(entry), i);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      if (lib$rsvp$utils$$isMaybeThenable(entry)) {\n        this._settleMaybeThenable(entry, i);\n      } else {\n        this._remaining--;\n        this._result[i] = this._makeResult(lib$rsvp$$internal$$FULFILLED, i, entry);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var promise = this.promise;\n\n      if (promise._state === lib$rsvp$$internal$$PENDING) {\n        this._remaining--;\n\n        if (this._abortOnReject && state === lib$rsvp$$internal$$REJECTED) {\n          lib$rsvp$$internal$$reject(promise, value);\n        } else {\n          this._result[i] = this._makeResult(state, i, value);\n        }\n      }\n\n      if (this._remaining === 0) {\n        lib$rsvp$$internal$$fulfill(promise, this._result);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {\n      return value;\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$rsvp$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$rsvp$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$rsvp$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$rsvp$promise$all$$all(entries, label) {\n      return new lib$rsvp$enumerator$$default(this, entries, true /* abort on reject */, label).promise;\n    }\n    var lib$rsvp$promise$all$$default = lib$rsvp$promise$all$$all;\n    function lib$rsvp$promise$race$$race(entries, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n\n      if (!lib$rsvp$utils$$isArray(entries)) {\n        lib$rsvp$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$rsvp$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$rsvp$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        lib$rsvp$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$rsvp$promise$race$$default = lib$rsvp$promise$race$$race;\n    function lib$rsvp$promise$reject$$reject(reason, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      lib$rsvp$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$rsvp$promise$reject$$default = lib$rsvp$promise$reject$$reject;\n\n    var lib$rsvp$promise$$guidKey = 'rsvp_' + lib$rsvp$utils$$now() + '-';\n    var lib$rsvp$promise$$counter = 0;\n\n    function lib$rsvp$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$rsvp$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    function lib$rsvp$promise$$Promise(resolver, label) {\n      this._id = lib$rsvp$promise$$counter++;\n      this._label = label;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      lib$rsvp$config$$config.instrument && lib$rsvp$instrument$$default('created', this);\n\n      if (lib$rsvp$$internal$$noop !== resolver) {\n        typeof resolver !== 'function' && lib$rsvp$promise$$needsResolver();\n        this instanceof lib$rsvp$promise$$Promise ? lib$rsvp$$internal$$initializePromise(this, resolver) : lib$rsvp$promise$$needsNew();\n      }\n    }\n\n    var lib$rsvp$promise$$default = lib$rsvp$promise$$Promise;\n\n    // deprecated\n    lib$rsvp$promise$$Promise.cast = lib$rsvp$promise$resolve$$default;\n    lib$rsvp$promise$$Promise.all = lib$rsvp$promise$all$$default;\n    lib$rsvp$promise$$Promise.race = lib$rsvp$promise$race$$default;\n    lib$rsvp$promise$$Promise.resolve = lib$rsvp$promise$resolve$$default;\n    lib$rsvp$promise$$Promise.reject = lib$rsvp$promise$reject$$default;\n\n    lib$rsvp$promise$$Promise.prototype = {\n      constructor: lib$rsvp$promise$$Promise,\n\n      _guidKey: lib$rsvp$promise$$guidKey,\n\n      _onError: function (reason) {\n        var promise = this;\n        lib$rsvp$config$$config.after(function() {\n          if (promise._onError) {\n            lib$rsvp$config$$config['trigger']('error', reason, promise._label);\n          }\n        });\n      },\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfillment\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: lib$rsvp$then$$default,\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection, label) {\n        return this.then(undefined, onRejection, label);\n      },\n\n    /**\n      `finally` will be invoked regardless of the promise's fate just as native\n      try/catch/finally behaves\n\n      Synchronous example:\n\n      ```js\n      findAuthor() {\n        if (Math.random() > 0.5) {\n          throw new Error();\n        }\n        return new Author();\n      }\n\n      try {\n        return findAuthor(); // succeed or fail\n      } catch(error) {\n        return findOtherAuther();\n      } finally {\n        // always runs\n        // doesn't affect the return value\n      }\n      ```\n\n      Asynchronous example:\n\n      ```js\n      findAuthor().catch(function(reason){\n        return findOtherAuther();\n      }).finally(function(){\n        // author was either found, or not\n      });\n      ```\n\n      @method finally\n      @param {Function} callback\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'finally': function(callback, label) {\n        var promise = this;\n        var constructor = promise.constructor;\n\n        return promise.then(function(value) {\n          return constructor.resolve(callback()).then(function() {\n            return value;\n          });\n        }, function(reason) {\n          return constructor.resolve(callback()).then(function() {\n            return constructor.reject(reason);\n          });\n        }, label);\n      }\n    };\n    function  lib$rsvp$$internal$$withOwnPromise() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$rsvp$$internal$$noop() {}\n\n    var lib$rsvp$$internal$$PENDING   = void 0;\n    var lib$rsvp$$internal$$FULFILLED = 1;\n    var lib$rsvp$$internal$$REJECTED  = 2;\n\n    var lib$rsvp$$internal$$GET_THEN_ERROR = new lib$rsvp$$internal$$ErrorObject();\n\n    function lib$rsvp$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$rsvp$$internal$$GET_THEN_ERROR.error = error;\n        return lib$rsvp$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$rsvp$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$rsvp$$internal$$handleForeignThenable(promise, thenable, then) {\n      lib$rsvp$config$$config.async(function(promise) {\n        var sealed = false;\n        var error = lib$rsvp$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$rsvp$$internal$$resolve(promise, value, undefined);\n          } else {\n            lib$rsvp$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$rsvp$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$rsvp$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$rsvp$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$rsvp$$internal$$FULFILLED) {\n        lib$rsvp$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$rsvp$$internal$$REJECTED) {\n        thenable._onError = null;\n        lib$rsvp$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$rsvp$$internal$$subscribe(thenable, undefined, function(value) {\n          if (thenable !== value) {\n            lib$rsvp$$internal$$resolve(promise, value, undefined);\n          } else {\n            lib$rsvp$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          lib$rsvp$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$rsvp$$internal$$handleMaybeThenable(promise, maybeThenable, then) {\n      if (maybeThenable.constructor === promise.constructor &&\n          then === lib$rsvp$then$$default &&\n          constructor.resolve === lib$rsvp$promise$resolve$$default) {\n        lib$rsvp$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        if (then === lib$rsvp$$internal$$GET_THEN_ERROR) {\n          lib$rsvp$$internal$$reject(promise, lib$rsvp$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$rsvp$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$rsvp$utils$$isFunction(then)) {\n          lib$rsvp$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$rsvp$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$rsvp$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      } else if (lib$rsvp$utils$$objectOrFunction(value)) {\n        lib$rsvp$$internal$$handleMaybeThenable(promise, value, lib$rsvp$$internal$$getThen(value));\n      } else {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$rsvp$$internal$$publishRejection(promise) {\n      if (promise._onError) {\n        promise._onError(promise._result);\n      }\n\n      lib$rsvp$$internal$$publish(promise);\n    }\n\n    function lib$rsvp$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$rsvp$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$rsvp$$internal$$FULFILLED;\n\n      if (promise._subscribers.length === 0) {\n        if (lib$rsvp$config$$config.instrument) {\n          lib$rsvp$instrument$$default('fulfilled', promise);\n        }\n      } else {\n        lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish, promise);\n      }\n    }\n\n    function lib$rsvp$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$rsvp$$internal$$PENDING) { return; }\n      promise._state = lib$rsvp$$internal$$REJECTED;\n      promise._result = reason;\n      lib$rsvp$config$$config.async(lib$rsvp$$internal$$publishRejection, promise);\n    }\n\n    function lib$rsvp$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onError = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$rsvp$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$rsvp$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish, parent);\n      }\n    }\n\n    function lib$rsvp$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (lib$rsvp$config$$config.instrument) {\n        lib$rsvp$instrument$$default(settled === lib$rsvp$$internal$$FULFILLED ? 'fulfilled' : 'rejected', promise);\n      }\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$rsvp$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$rsvp$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$rsvp$$internal$$TRY_CATCH_ERROR = new lib$rsvp$$internal$$ErrorObject();\n\n    function lib$rsvp$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$rsvp$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$rsvp$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$rsvp$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$rsvp$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$rsvp$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$rsvp$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$rsvp$$internal$$reject(promise, lib$rsvp$$internal$$withOwnPromise());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$rsvp$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$rsvp$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$rsvp$$internal$$reject(promise, error);\n      } else if (settled === lib$rsvp$$internal$$FULFILLED) {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      } else if (settled === lib$rsvp$$internal$$REJECTED) {\n        lib$rsvp$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$rsvp$$internal$$initializePromise(promise, resolver) {\n      var resolved = false;\n      try {\n        resolver(function resolvePromise(value){\n          if (resolved) { return; }\n          resolved = true;\n          lib$rsvp$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          if (resolved) { return; }\n          resolved = true;\n          lib$rsvp$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$rsvp$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$rsvp$all$settled$$AllSettled(Constructor, entries, label) {\n      this._superConstructor(Constructor, entries, false /* don't abort on reject */, label);\n    }\n\n    lib$rsvp$all$settled$$AllSettled.prototype = lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);\n    lib$rsvp$all$settled$$AllSettled.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$all$settled$$AllSettled.prototype._makeResult = lib$rsvp$enumerator$$makeSettledResult;\n    lib$rsvp$all$settled$$AllSettled.prototype._validationError = function() {\n      return new Error('allSettled must be called with an array');\n    };\n\n    function lib$rsvp$all$settled$$allSettled(entries, label) {\n      return new lib$rsvp$all$settled$$AllSettled(lib$rsvp$promise$$default, entries, label).promise;\n    }\n    var lib$rsvp$all$settled$$default = lib$rsvp$all$settled$$allSettled;\n    function lib$rsvp$all$$all(array, label) {\n      return lib$rsvp$promise$$default.all(array, label);\n    }\n    var lib$rsvp$all$$default = lib$rsvp$all$$all;\n    var lib$rsvp$asap$$len = 0;\n    var lib$rsvp$asap$$toString = {}.toString;\n    var lib$rsvp$asap$$vertxNext;\n    function lib$rsvp$asap$$asap(callback, arg) {\n      lib$rsvp$asap$$queue[lib$rsvp$asap$$len] = callback;\n      lib$rsvp$asap$$queue[lib$rsvp$asap$$len + 1] = arg;\n      lib$rsvp$asap$$len += 2;\n      if (lib$rsvp$asap$$len === 2) {\n        // If len is 1, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        lib$rsvp$asap$$scheduleFlush();\n      }\n    }\n\n    var lib$rsvp$asap$$default = lib$rsvp$asap$$asap;\n\n    var lib$rsvp$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$rsvp$asap$$browserGlobal = lib$rsvp$asap$$browserWindow || {};\n    var lib$rsvp$asap$$BrowserMutationObserver = lib$rsvp$asap$$browserGlobal.MutationObserver || lib$rsvp$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$rsvp$asap$$isNode = typeof self === 'undefined' &&\n      typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$rsvp$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$rsvp$asap$$useNextTick() {\n      var nextTick = process.nextTick;\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // setImmediate should be used instead instead\n      var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n        nextTick = setImmediate;\n      }\n      return function() {\n        nextTick(lib$rsvp$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$rsvp$asap$$useVertxTimer() {\n      return function() {\n        lib$rsvp$asap$$vertxNext(lib$rsvp$asap$$flush);\n      };\n    }\n\n    function lib$rsvp$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$rsvp$asap$$BrowserMutationObserver(lib$rsvp$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$rsvp$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$rsvp$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$rsvp$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$rsvp$asap$$flush, 1);\n      };\n    }\n\n    var lib$rsvp$asap$$queue = new Array(1000);\n    function lib$rsvp$asap$$flush() {\n      for (var i = 0; i < lib$rsvp$asap$$len; i+=2) {\n        var callback = lib$rsvp$asap$$queue[i];\n        var arg = lib$rsvp$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$rsvp$asap$$queue[i] = undefined;\n        lib$rsvp$asap$$queue[i+1] = undefined;\n      }\n\n      lib$rsvp$asap$$len = 0;\n    }\n\n    function lib$rsvp$asap$$attemptVertex() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$rsvp$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$rsvp$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$rsvp$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$rsvp$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$rsvp$asap$$isNode) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useNextTick();\n    } else if (lib$rsvp$asap$$BrowserMutationObserver) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useMutationObserver();\n    } else if (lib$rsvp$asap$$isWorker) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useMessageChannel();\n    } else if (lib$rsvp$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$attemptVertex();\n    } else {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useSetTimeout();\n    }\n    function lib$rsvp$defer$$defer(label) {\n      var deferred = {};\n\n      deferred['promise'] = new lib$rsvp$promise$$default(function(resolve, reject) {\n        deferred['resolve'] = resolve;\n        deferred['reject'] = reject;\n      }, label);\n\n      return deferred;\n    }\n    var lib$rsvp$defer$$default = lib$rsvp$defer$$defer;\n    function lib$rsvp$filter$$filter(promises, filterFn, label) {\n      return lib$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!lib$rsvp$utils$$isFunction(filterFn)) {\n          throw new TypeError(\"You must pass a function as filter's second argument.\");\n        }\n\n        var length = values.length;\n        var filtered = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          filtered[i] = filterFn(values[i]);\n        }\n\n        return lib$rsvp$promise$$default.all(filtered, label).then(function(filtered) {\n          var results = new Array(length);\n          var newLength = 0;\n\n          for (var i = 0; i < length; i++) {\n            if (filtered[i]) {\n              results[newLength] = values[i];\n              newLength++;\n            }\n          }\n\n          results.length = newLength;\n\n          return results;\n        });\n      });\n    }\n    var lib$rsvp$filter$$default = lib$rsvp$filter$$filter;\n\n    function lib$rsvp$promise$hash$$PromiseHash(Constructor, object, label) {\n      this._superConstructor(Constructor, object, true, label);\n    }\n\n    var lib$rsvp$promise$hash$$default = lib$rsvp$promise$hash$$PromiseHash;\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype = lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);\n    lib$rsvp$promise$hash$$PromiseHash.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$promise$hash$$PromiseHash.prototype._init = function() {\n      this._result = {};\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._validateInput = function(input) {\n      return input && typeof input === 'object';\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._validationError = function() {\n      return new Error('Promise.hash must be called with an object');\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._enumerate = function() {\n      var enumerator = this;\n      var promise    = enumerator.promise;\n      var input      = enumerator._input;\n      var results    = [];\n\n      for (var key in input) {\n        if (promise._state === lib$rsvp$$internal$$PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n          results.push({\n            position: key,\n            entry: input[key]\n          });\n        }\n      }\n\n      var length = results.length;\n      enumerator._remaining = length;\n      var result;\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        result = results[i];\n        enumerator._eachEntry(result.entry, result.position);\n      }\n    };\n\n    function lib$rsvp$hash$settled$$HashSettled(Constructor, object, label) {\n      this._superConstructor(Constructor, object, false, label);\n    }\n\n    lib$rsvp$hash$settled$$HashSettled.prototype = lib$rsvp$utils$$o_create(lib$rsvp$promise$hash$$default.prototype);\n    lib$rsvp$hash$settled$$HashSettled.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$hash$settled$$HashSettled.prototype._makeResult = lib$rsvp$enumerator$$makeSettledResult;\n\n    lib$rsvp$hash$settled$$HashSettled.prototype._validationError = function() {\n      return new Error('hashSettled must be called with an object');\n    };\n\n    function lib$rsvp$hash$settled$$hashSettled(object, label) {\n      return new lib$rsvp$hash$settled$$HashSettled(lib$rsvp$promise$$default, object, label).promise;\n    }\n    var lib$rsvp$hash$settled$$default = lib$rsvp$hash$settled$$hashSettled;\n    function lib$rsvp$hash$$hash(object, label) {\n      return new lib$rsvp$promise$hash$$default(lib$rsvp$promise$$default, object, label).promise;\n    }\n    var lib$rsvp$hash$$default = lib$rsvp$hash$$hash;\n    function lib$rsvp$map$$map(promises, mapFn, label) {\n      return lib$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!lib$rsvp$utils$$isFunction(mapFn)) {\n          throw new TypeError(\"You must pass a function as map's second argument.\");\n        }\n\n        var length = values.length;\n        var results = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          results[i] = mapFn(values[i]);\n        }\n\n        return lib$rsvp$promise$$default.all(results, label);\n      });\n    }\n    var lib$rsvp$map$$default = lib$rsvp$map$$map;\n\n    function lib$rsvp$node$$Result() {\n      this.value = undefined;\n    }\n\n    var lib$rsvp$node$$ERROR = new lib$rsvp$node$$Result();\n    var lib$rsvp$node$$GET_THEN_ERROR = new lib$rsvp$node$$Result();\n\n    function lib$rsvp$node$$getThen(obj) {\n      try {\n       return obj.then;\n      } catch(error) {\n        lib$rsvp$node$$ERROR.value= error;\n        return lib$rsvp$node$$ERROR;\n      }\n    }\n\n\n    function lib$rsvp$node$$tryApply(f, s, a) {\n      try {\n        f.apply(s, a);\n      } catch(error) {\n        lib$rsvp$node$$ERROR.value = error;\n        return lib$rsvp$node$$ERROR;\n      }\n    }\n\n    function lib$rsvp$node$$makeObject(_, argumentNames) {\n      var obj = {};\n      var name;\n      var i;\n      var length = _.length;\n      var args = new Array(length);\n\n      for (var x = 0; x < length; x++) {\n        args[x] = _[x];\n      }\n\n      for (i = 0; i < argumentNames.length; i++) {\n        name = argumentNames[i];\n        obj[name] = args[i + 1];\n      }\n\n      return obj;\n    }\n\n    function lib$rsvp$node$$arrayResult(_) {\n      var length = _.length;\n      var args = new Array(length - 1);\n\n      for (var i = 1; i < length; i++) {\n        args[i - 1] = _[i];\n      }\n\n      return args;\n    }\n\n    function lib$rsvp$node$$wrapThenable(then, promise) {\n      return {\n        then: function(onFulFillment, onRejection) {\n          return then.call(promise, onFulFillment, onRejection);\n        }\n      };\n    }\n\n    function lib$rsvp$node$$denodeify(nodeFunc, options) {\n      var fn = function() {\n        var self = this;\n        var l = arguments.length;\n        var args = new Array(l + 1);\n        var arg;\n        var promiseInput = false;\n\n        for (var i = 0; i < l; ++i) {\n          arg = arguments[i];\n\n          if (!promiseInput) {\n            // TODO: clean this up\n            promiseInput = lib$rsvp$node$$needsPromiseInput(arg);\n            if (promiseInput === lib$rsvp$node$$GET_THEN_ERROR) {\n              var p = new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);\n              lib$rsvp$$internal$$reject(p, lib$rsvp$node$$GET_THEN_ERROR.value);\n              return p;\n            } else if (promiseInput && promiseInput !== true) {\n              arg = lib$rsvp$node$$wrapThenable(promiseInput, arg);\n            }\n          }\n          args[i] = arg;\n        }\n\n        var promise = new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);\n\n        args[l] = function(err, val) {\n          if (err)\n            lib$rsvp$$internal$$reject(promise, err);\n          else if (options === undefined)\n            lib$rsvp$$internal$$resolve(promise, val);\n          else if (options === true)\n            lib$rsvp$$internal$$resolve(promise, lib$rsvp$node$$arrayResult(arguments));\n          else if (lib$rsvp$utils$$isArray(options))\n            lib$rsvp$$internal$$resolve(promise, lib$rsvp$node$$makeObject(arguments, options));\n          else\n            lib$rsvp$$internal$$resolve(promise, val);\n        };\n\n        if (promiseInput) {\n          return lib$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self);\n        } else {\n          return lib$rsvp$node$$handleValueInput(promise, args, nodeFunc, self);\n        }\n      };\n\n      fn.__proto__ = nodeFunc;\n\n      return fn;\n    }\n\n    var lib$rsvp$node$$default = lib$rsvp$node$$denodeify;\n\n    function lib$rsvp$node$$handleValueInput(promise, args, nodeFunc, self) {\n      var result = lib$rsvp$node$$tryApply(nodeFunc, self, args);\n      if (result === lib$rsvp$node$$ERROR) {\n        lib$rsvp$$internal$$reject(promise, result.value);\n      }\n      return promise;\n    }\n\n    function lib$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self){\n      return lib$rsvp$promise$$default.all(args).then(function(args){\n        var result = lib$rsvp$node$$tryApply(nodeFunc, self, args);\n        if (result === lib$rsvp$node$$ERROR) {\n          lib$rsvp$$internal$$reject(promise, result.value);\n        }\n        return promise;\n      });\n    }\n\n    function lib$rsvp$node$$needsPromiseInput(arg) {\n      if (arg && typeof arg === 'object') {\n        if (arg.constructor === lib$rsvp$promise$$default) {\n          return true;\n        } else {\n          return lib$rsvp$node$$getThen(arg);\n        }\n      } else {\n        return false;\n      }\n    }\n    var lib$rsvp$platform$$platform;\n\n    /* global self */\n    if (typeof self === 'object') {\n      lib$rsvp$platform$$platform = self;\n\n    /* global global */\n    } else if (typeof global === 'object') {\n      lib$rsvp$platform$$platform = global;\n    } else {\n      throw new Error('no global: `self` or `global` found');\n    }\n\n    var lib$rsvp$platform$$default = lib$rsvp$platform$$platform;\n    function lib$rsvp$race$$race(array, label) {\n      return lib$rsvp$promise$$default.race(array, label);\n    }\n    var lib$rsvp$race$$default = lib$rsvp$race$$race;\n    function lib$rsvp$reject$$reject(reason, label) {\n      return lib$rsvp$promise$$default.reject(reason, label);\n    }\n    var lib$rsvp$reject$$default = lib$rsvp$reject$$reject;\n    function lib$rsvp$resolve$$resolve(value, label) {\n      return lib$rsvp$promise$$default.resolve(value, label);\n    }\n    var lib$rsvp$resolve$$default = lib$rsvp$resolve$$resolve;\n    function lib$rsvp$rethrow$$rethrow(reason) {\n      setTimeout(function() {\n        throw reason;\n      });\n      throw reason;\n    }\n    var lib$rsvp$rethrow$$default = lib$rsvp$rethrow$$rethrow;\n\n    // defaults\n    lib$rsvp$config$$config.async = lib$rsvp$asap$$default;\n    lib$rsvp$config$$config.after = function(cb) {\n      setTimeout(cb, 0);\n    };\n    var lib$rsvp$$cast = lib$rsvp$resolve$$default;\n    function lib$rsvp$$async(callback, arg) {\n      lib$rsvp$config$$config.async(callback, arg);\n    }\n\n    function lib$rsvp$$on() {\n      lib$rsvp$config$$config['on'].apply(lib$rsvp$config$$config, arguments);\n    }\n\n    function lib$rsvp$$off() {\n      lib$rsvp$config$$config['off'].apply(lib$rsvp$config$$config, arguments);\n    }\n\n    // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\n    if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n      var lib$rsvp$$callbacks = window['__PROMISE_INSTRUMENTATION__'];\n      lib$rsvp$config$$configure('instrument', true);\n      for (var lib$rsvp$$eventName in lib$rsvp$$callbacks) {\n        if (lib$rsvp$$callbacks.hasOwnProperty(lib$rsvp$$eventName)) {\n          lib$rsvp$$on(lib$rsvp$$eventName, lib$rsvp$$callbacks[lib$rsvp$$eventName]);\n        }\n      }\n    }\n\n    var lib$rsvp$umd$$RSVP = {\n      'race': lib$rsvp$race$$default,\n      'Promise': lib$rsvp$promise$$default,\n      'allSettled': lib$rsvp$all$settled$$default,\n      'hash': lib$rsvp$hash$$default,\n      'hashSettled': lib$rsvp$hash$settled$$default,\n      'denodeify': lib$rsvp$node$$default,\n      'on': lib$rsvp$$on,\n      'off': lib$rsvp$$off,\n      'map': lib$rsvp$map$$default,\n      'filter': lib$rsvp$filter$$default,\n      'resolve': lib$rsvp$resolve$$default,\n      'reject': lib$rsvp$reject$$default,\n      'all': lib$rsvp$all$$default,\n      'rethrow': lib$rsvp$rethrow$$default,\n      'defer': lib$rsvp$defer$$default,\n      'EventTarget': lib$rsvp$events$$default,\n      'configure': lib$rsvp$config$$configure,\n      'async': lib$rsvp$$async\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$rsvp$umd$$RSVP; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$rsvp$umd$$RSVP;\n    } else if (typeof lib$rsvp$platform$$default !== 'undefined') {\n      lib$rsvp$platform$$default['RSVP'] = lib$rsvp$umd$$RSVP;\n    }\n}).call(this);\n\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":66}]},{},[27])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"file":"algorithm_visualizer.js","sourceRoot":"/source/"}